{"version":3,"sources":["services/unsplashService.js","style/img/collage.jpg","style/img/colors.jpg","history.js","services/httpService.js","services/boardService.js","services/socketService.js","store/actions/boardActions.js","cmps/AddCard.jsx","cmps/CardLabels.jsx","cmps/DueBadge.jsx","cmps/MemberInitials.jsx","cmps/LabelEdit.jsx","cmps/LabelsEdit.jsx","cmps/MemberEdit.jsx","cmps/MembersEdit.jsx","cmps/DueDateEdit.jsx","cmps/CardMenu.jsx","cmps/CardPreview.jsx","cmps/PhasePreview.jsx","cmps/PhaseList.jsx","cmps/Activity.jsx","cmps/Activities.jsx","cmps/boardMenu/BoardMenu.jsx","cmps/boardMenu/ColorMenu.jsx","cmps/boardMenu/PhotoMenu.jsx","cmps/boardMenu/BackgroundMenu.jsx","cmps/CardHeader.jsx","cmps/CardDesc.jsx","cmps/ChecklistItem.jsx","cmps/CardChecklist.jsx","cmps/Card.jsx","pages/Board.jsx","pages/Home.jsx","pages/Login.jsx","pages/Signup.jsx","cmps/MainNav.jsx","pages/Boards.jsx","pages/Dashboard.jsx","App.jsx","serviceWorker.js","store/reducers/boardReducer.js","store/reducers/index.js","store/store.js","index.js"],"names":["global","fetch","unsplash","Unsplash","accessKey","unsplashService","getListPhotos","perPage","page","_getRandomInt","photos","listPhotos","then","res","json","min","max","Math","ceil","floor","random","module","exports","history","createBrowserHistory","httpService","endpoint","data","ajax","a","method","axios","url","console","log","dir","response","status","push","OPERETIONS","TYPES","elForm","UPLOAD_URL","formData","FormData","append","files","filter","boards","id","board","addboard","updateboard","makeId","length","txt","possible","i","charAt","socket","boardService","query","getById","remove","add","update","doUploadiMG","getBoardCopy","JSON","parse","stringify","getNewCard","partialCard","bgColor","desc","dueDate","createdAt","Date","now","labels","checkList","assignedTo","attachments","getNewPhase","name","cards","getSortedPhase","sortBy","phase","sort","card1","card2","title","localeCompare","addActivity","user","operation","type","object","activity","at","activities","unshift","createNewBoard","loggedInUser","creator","members","phaseLists","isLabelTxtShown","imgUrl","socketService","setup","io","terminate","on","eventName","cb","off","emit","LOGGED_IN_USER","loadBoard","dispatch","updateBoard","updatedBoard","state","_id","setCard","card","_AddCard","handleChange","target","setState","value","onAddCard","ev","preventDefault","trim","boardCopy","props","phaseIdx","findIndex","phaseId","newCard","bottomCard","scrollIntoView","behavior","this","isAddCardShown","cardNameInput","addEventListener","submitOnEnter","which","shiftKey","form","dispatchEvent","Event","cancelable","toggleAddCardShown","Fragment","className","onSubmit","required","autoFocus","autoComplete","onChange","spellCheck","ref","el","placeholder","onBlur","onClick","Close","Component","mapDispatchToProps","AddCard","connect","trelloApp","_CardLabels","toggleIsLabelTxtShown","stopPropagation","getUpdatedLabels","label","foundLabel","find","boardLabel","labelClassName","map","style","backgroundColor","color","key","CardLabels","DueBadge","displayDate","moment","format","isDueClose","AccessTime","fontSize","MemberInitials","firstLastName","initials","member","fullName","split","str","join","slice","img","toUpperCase","backgroundImage","LabelEdit","toggleEditMode","isLabelOnCard","some","lbl","toggleLabelOnCard","Check","CreateOutlined","_LabelsEdit","editLabel","hideLabelsEdit","code","toggleProperty","prevState","saveLabel","editedLabel","cardId","cardIdx","window","removeEventListener","Clear","LabelsEdit","MemberEdit","toggleMemberOnCard","isMemberOnCard","mmbr","_MembersEdit","hideMembersEdit","membersToDisplay","toLowerCase","includes","MembersEdit","DueDateEdit","hideDueDateEdit","handleDateChange","date","_d","getTime","handleSave","changeDueDate","removeDueDate","DateTimePicker","disablePast","views","minDateMessage","_CardMenu","isLabelEditShown","isMembersEditShown","isDueDateEditShown","hideMenu","toggleIsMenuShown","getPhaseIdxByCardId","onDelete","onChangeTitle","newDate","property","titleInput","clientX","clientY","onMouseDown","top","left","cols","rows","LabelOutlined","PersonOutlineOutlined","DeleteForeverOutlined","CardMenu","_CardPreview","isMenuShown","persist","checklistDoneCount","item","isDone","checklistBgc","checklistColor","draggableId","index","provided","snapshot","draggableProps","dragHandleProps","innerRef","alt","src","AttachmentOutlined","CheckBoxOutlined","React","CardPreview","_PhasePreview","isInputShown","isSortShown","newPhaseName","toggleInputShown","hideInput","handleSubmit","toggleMenuShown","showAddCard","toggleIsSortShown","sortListBy","sortedPhase","onDeletePhase","isDropAnimating","MoreHoriz","droppableId","droppableProps","opacity","Add","PhasePreview","_PhaseList","newListName","removeEventListeners","addEventListeners","listNameInput","submitBtn","onAddPhase","newPhase","listForm","inline","onDragEnd","result","destination","source","newPhasesOrder","movingPhase","splice","srcPhase","dstPhase","movingCard","prevProps","direction","PhaseList","_Activity","dynamicActivity","userElmemnt","elmentType","href","rel","OpenByObjectType","fromNow","allowOpenCard","boardClone","onCloseMenu","Activity","_Activities","onEnterDown","handleSaveBoard","showCommentBox","ListOutlined","onKeyDown","Activities","BoardMenu","menuClass","boardBg","CloseOutlined","onToggleMenu","_ColorMenu","changeBoardColor","clonedBoard","ArrowBackIosOutlined","ColorMenu","_PhotoMenu","imgs","changeBoardImg","thumbUrl","urls","thumb","regularUrl","regular","fullUrl","full","credit","links","html","userName","PhotoMenu","BackgroundMenu","require","_CardHeader","onPhase","isTitleOnEdit","toggleInput","forEach","autoGrow","elTextarea","height","scrollHeight","backToboard","currPhase","e","keyCode","blur","onFocus","handleKeyPress","autoCorrect","CardHeader","_CardDesc","CardDesc","ChecklistItem","idx","todo","checked","_CardChecklist","todoText","onAdd","progress","checklistTitle","progressBarUpdate","doneTodos","reduce","acc","currVal","addTodo","newTodo","clone","updatedCards","phaseIndex","toggleAdd","field","cloneChkList","handleFocus","select","progressBgc","PlaylistAddCheck","width","CardChecklist","_Card","cardActivities","hideCard","getActivities","limit","addCheckList","cloneCard","removeMemberFromCard","PermIdentity","Schedule","Attachment","CropOriginal","Card","_Board","boardMenus","currentOpend","menusState","mainMenu","backgroundMenu","colorMenu","photoMenu","openSocket","match","params","getBoardById","toggleMenu","menuName","clonedMenus","to","PieChartOutlined","MenuOutlined","Board","_Home","Home","Login","Signup","_MainNav","isCreateBoardMenuShown","newBoardName","newBoardColor","isPreviewSelected","handleChangeColor","boardColor","toggleAddBoard","boardName","newBoard","addBoard","HomeOutlined","DashboardOutlined","AccountTreeOutlined","addedBoard","MainNav","_Boards","handleLoadBoard","queryBoards","backgroundSize","Boards","bgColors","hovColors","_Dashboard","getSprintProgress","getSprintProgressMap","checkListItem","Object","keys","datasets","values","hoverBackgroundColor","getTaskPerPhaseDistribution","phaseTaskMap","getTaskByLables","devTaskMap","tPerDevloper","getTasksPerDevloperData","taskPerPhaseDistribution","tasksByLabels","sprintProgress","options","scales","yAxes","ticks","beginAtZero","Dashboard","App","path","component","exact","Boolean","location","hostname","initialState","rootReducer","combineReducers","action","boardId","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","utils","MomentUtils","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.54c366ed.chunk.js","sourcesContent":["import fetch from 'node-fetch';\r\nimport Unsplash from 'unsplash-js';\r\nglobal.fetch = fetch;\r\nconst unsplash = new Unsplash({ accessKey: \"8ZH8zzN8CDDrZJWGYhpPmzEreLvOZ6WRPVTgnEH_6Ac\" });\r\n\r\n\r\nfunction getListPhotos(perPage = 14) {\r\n    const page = _getRandomInt(1, 5)\r\n    return unsplash.photos.listPhotos(page, perPage, \"popular\")\r\n        .then(res => res.json());\r\n}\r\n\r\nexport const unsplashService = {\r\n    getListPhotos\r\n}\r\nfunction _getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/collage.48948499.jpg\";","module.exports = __webpack_public_path__ + \"static/media/colors.864f4df1.jpg\";","import { createBrowserHistory } from 'history';\r\nexport const history = createBrowserHistory();\r\n","import { history } from '../history';\r\nimport axios from 'axios';\r\n\r\nconst BASE_URL = process.env.NODE_ENV === 'production'\r\n    ? '/'\r\n    : '//localhost:3030/api/'\r\n\r\n\r\nexport const httpService = {\r\n    get(endpoint, data) {\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data) {\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data) {\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data) {\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\n\r\nasync function ajax(endpoint, method = 'get', data = null) {\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data\r\n        })\r\n        return res.data;\r\n    } catch (err) {\r\n        console.log(`Had Issues ${method}ing to the backend, endpoint: ${endpoint}, with data: ${data}`);\r\n        console.dir(err);\r\n        if (err.response && err.response.status === 401) {\r\n            history.push('/');\r\n        }\r\n        throw err;\r\n    }\r\n}","import { httpService } from './httpService'\r\nconst CLOUD_NAME = 'dcubdqpfg'\r\nexport const OPERETIONS = {\r\n    ADD: 'Add',\r\n    UPDATE: 'Updated',\r\n    DELETE: 'Delete'\r\n}\r\nexport const TYPES = {\r\n    CARD: 'Card',\r\n    PHASE: 'Phase',\r\n    Board: 'Board'\r\n}\r\n\r\nasync function doUploadiMG(elForm) {\r\n\r\n    const UPLOAD_URL = `https://api.cloudinary.com/v1_1/${CLOUD_NAME}/image/upload`;\r\n    const UPLOAD_PRESET = 'muxmg14s';\r\n    var formData = new FormData();\r\n    formData.append('file', elForm.files[0]);\r\n    formData.append('upload_preset', UPLOAD_PRESET);\r\n\r\n    await httpService.post(UPLOAD_URL, formData);\r\n}\r\n\r\n\r\nasync function query(filter) {\r\n    var queryString = '';\r\n    // if (filter) {\r\n    //     if (filter.inStock !== '') queryString = `?inStock=${filter.inStock}`;\r\n    //     if (filter.type !== '') (queryString === '') ? queryString = `?type=${filter.type}` : queryString += `&type=${filter.type}`;\r\n    //     if (filter.name !== '') (queryString === '') ? queryString = `?q=${filter.name}` : queryString += `&q=${filter.name}`;\r\n    // }\r\n    const boards = await httpService.get(`board/${queryString}`);\r\n    return boards;\r\n}\r\n\r\nasync function getById(id) {\r\n    const board = await httpService.get(`board/${id}`);\r\n    return board\r\n}\r\n\r\nasync function add(addboard) {\r\n\r\n    const board = await httpService.post(`board`, addboard);\r\n    return board;\r\n}\r\n\r\nasync function update(updateboard) {\r\n    const board = await httpService.put('board', updateboard);\r\n    return board;\r\n}\r\n\r\nasync function remove(id) {\r\n    await httpService.delete(`board/${id}`);\r\n}\r\n\r\nfunction getBoardCopy(board) {\r\n    return JSON.parse(JSON.stringify(board));\r\n}\r\n\r\nfunction getNewCard(partialCard) {\r\n    return {\r\n        ...partialCard,//this currently has only a title\r\n        id: makeId(),\r\n        bgColor: '',\r\n        desc: '',\r\n        dueDate: null,\r\n        createdAt: Date.now(),\r\n        labels: [],\r\n        checkList: [],\r\n        assignedTo: [],\r\n        attachments: []\r\n    }\r\n}\r\n\r\nfunction getNewPhase(name) {\r\n    return {\r\n        id: makeId(),\r\n        name,\r\n        desc: '',\r\n        cards: []\r\n    }\r\n}\r\n\r\nfunction addActivity(board, user, operation, type, object, desc = null) {\r\n    const activity = {\r\n        at: Date.now(),\r\n        operation,\r\n        user,\r\n        type,\r\n        object,\r\n        desc\r\n    }\r\n    board.activities.unshift(activity);\r\n}\r\n\r\nfunction getSortedPhase(sortBy, phase) {\r\n    if (sortBy === 'title') {\r\n        return phase.cards.sort((card1, card2) => card1.title.localeCompare(card2.title))\r\n    } else if (sortBy === 'firstCreated') {\r\n        return phase.cards.sort((card1, card2) => card1.createdAt - card2.createdAt);\r\n    } else return phase.cards.sort((card1, card2) => card2.createdAt - card1.createdAt);\r\n}\r\n\r\nfunction createNewBoard(name, bgColor, loggedInUser) {\r\n    const _board = {\r\n\r\n        name: name,\r\n        bgColor: bgColor,\r\n        createdAt: Date.now(),\r\n        creator: loggedInUser,\r\n        members: [loggedInUser],\r\n        desc: null,\r\n        activities: [],\r\n        phaseLists: [],\r\n        labels: [],\r\n        isLabelTxtShown: false,\r\n        imgUrl: null\r\n    }\r\n    return _board;\r\n}\r\n\r\n\r\n\r\nfunction makeId(length = 5) {\r\n    var txt = '';\r\n    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    for (var i = 0; i < length; i++) {\r\n        txt += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n    return txt;\r\n}\r\n\r\nexport const boardService = {\r\n    query,\r\n    getById,\r\n    remove,\r\n    add,\r\n    update,\r\n    doUploadiMG,\r\n    makeId,\r\n    getBoardCopy,\r\n    getNewCard,\r\n    getNewPhase,\r\n    getSortedPhase,\r\n    addActivity,\r\n    createNewBoard\r\n}","import io from 'socket.io-client';\r\n\r\nconst BASE_URL =\r\n  process.env.NODE_ENV === 'production' ? '/' : '//localhost:3030';\r\n\r\nlet socket;\r\n\r\nexport const socketService = {\r\n  setup,\r\n  terminate,\r\n  on,\r\n  off,\r\n  emit\r\n};\r\n\r\nfunction setup() {\r\n  socket = io(BASE_URL);\r\n}\r\n\r\nfunction terminate() {\r\n  socket = null;\r\n}\r\n\r\nfunction on(eventName, cb) {\r\n  socket.on(eventName, cb);\r\n}\r\n\r\nfunction off(eventName, cb) {\r\n  socket.off(eventName, cb);\r\n}\r\n\r\nfunction emit(eventName, data) {\r\n  socket.emit(eventName, data);\r\n}\r\n","import { boardService } from '../../services/boardService'\r\nimport { socketService } from '../../services/socketService'\r\nexport const LOAD_BOARD = 'LOAD_BOARD';\r\nexport const UPDATE_BOARD = 'UPDATE_BOARD';\r\nexport const ADD_BOARD = 'ADD_BOARD';\r\nexport const REMOVE_BOARD = 'REMOVE_BOARD';\r\nexport const QUERY_BOARDS = 'QUERY_BOARDS'\r\nexport const CREATE_BOARD = 'CREATE_BOARD';\r\n\r\nexport const LOGGED_IN_USER = {\r\n    \"_id\": \"5eccd4e1cb39d7f54947fd7e\",\r\n    \"fullName\": \"Guest\",\r\n    \"email\": \"noemail@no.com\",\r\n    \"password\": \"123456\",\r\n    \"img\": \"https://img.icons8.com/plasticine/2x/user.png\"\r\n}\r\n\r\nexport function queryBoards(filter) {\r\n    return dispatch => {\r\n        boardService.query(filter)\r\n            .then(boards => dispatch({ type: QUERY_BOARDS, boards }));\r\n    }\r\n}\r\n\r\nexport function loadBoard(id) {\r\n    return async dispatch => {\r\n        const board = await boardService.getById(id);\r\n        dispatch({ type: LOAD_BOARD, board });\r\n    }\r\n}\r\n\r\nexport function addBoard(addedBoard) {\r\n    return async dispatch => {\r\n        const board = await boardService.add(addedBoard);\r\n        dispatch({ type: ADD_BOARD, board })\r\n    }\r\n}\r\n\r\nexport function updateBoard(updatedBoard) {\r\n\r\n    return async (dispatch, state) => {\r\n        //const keepBoard = boardService.getBoardCopy(state.board); not working right now the state.board is undifined; wierd!!!\r\n        dispatch({ type: UPDATE_BOARD, board: updatedBoard });\r\n\r\n        try {\r\n            await boardService.update(updatedBoard);\r\n        } catch (err) {\r\n            // dispatch({ type: UPDATE_BOARD, board: keepBoard });\r\n        }\r\n\r\n        socketService.emit('board updated', updatedBoard._id);\r\n    }\r\n}\r\n\r\nexport function removeBoard(boardId) {\r\n    return dispatch => {\r\n        boardService.remove(boardId)\r\n            .then(() => dispatch({ type: REMOVE_BOARD, boardId }));\r\n    }\r\n}\r\n\r\nexport function setCard(card) {\r\n    return dispatch => {\r\n        dispatch({ type: 'SET_CARD', card });\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Close } from '@material-ui/icons';\r\nimport { connect } from 'react-redux';\r\nimport { updateBoard, LOGGED_IN_USER } from '../store/actions/boardActions';\r\nimport { boardService, OPERETIONS, TYPES } from '../services/boardService';\r\n\r\nexport class _AddCard extends Component {\r\n    state = {\r\n        card: {\r\n            title: ''\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.isAddCardShown) {\r\n            this.cardNameInput.addEventListener(\"keypress\", this.submitOnEnter);\r\n            this.props.bottomCard.scrollIntoView({ behavior: 'smooth' });\r\n        }\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        this.setState({ card: { title: target.value } })\r\n    }\r\n\r\n    onAddCard = async (ev) => {\r\n        ev.preventDefault();\r\n        if (!this.state.card.title.trim()) return;\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const phaseIdx = boardCopy.phaseLists.findIndex(phase => phase.id === this.props.phaseId);\r\n        const newCard = boardService.getNewCard(this.state.card);\r\n        boardCopy.phaseLists[phaseIdx].cards.push(newCard);\r\n        boardService.addActivity(boardCopy, LOGGED_IN_USER, OPERETIONS.ADD, TYPES.CARD, { id: newCard.id, title: newCard.title });\r\n\r\n        await this.props.updateBoard(boardCopy);//async await is for the scroll\r\n        this.setState({ card: { title: '' } });\r\n        this.props.bottomCard.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n\r\n    submitOnEnter(ev) {\r\n        // this allows Shift+Enter = new line, Enter = submit form\r\n        if (ev.which === 13 && !ev.shiftKey) {\r\n            ev.target.form.dispatchEvent(new Event(\"submit\", { cancelable: true }));\r\n            ev.preventDefault();\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const { handleChange, onAddCard, state } = this;\r\n        const { toggleAddCardShown, isAddCardShown } = this.props;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                {isAddCardShown && <form className=\"add-card\" onSubmit={onAddCard}>\r\n                    <textarea className=\"card-name-input\" required autoFocus type=\"text\"\r\n                        name=\"title\" autoComplete=\"off\" onChange={handleChange} spellCheck=\"false\"\r\n                        ref={el => this.cardNameInput = el} value={state.card.title}\r\n                        placeholder=\"Enter a title for this card..\" onBlur={toggleAddCardShown} />\r\n                    <div className=\"form-btns flex align-end\">\r\n                        <button className=\"submit-btn\" type=\"submit\">Add Card</button>\r\n                        <button className=\"close-btn\" onClick={toggleAddCardShown}><Close /></button>\r\n                    </div>\r\n                </form>}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard,\r\n}\r\n\r\nexport const AddCard = connect(mapStateToProps, mapDispatchToProps)(_AddCard)\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { updateBoard } from '../store/actions/boardActions';\r\nimport { boardService } from '../services/boardService';\r\n\r\nexport class _CardLabels extends Component {\r\n\r\n    toggleIsLabelTxtShown = (ev) => {\r\n        ev.stopPropagation();\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        boardCopy.isLabelTxtShown = !boardCopy.isLabelTxtShown;\r\n        this.props.updateBoard(boardCopy);\r\n    }\r\n\r\n    getUpdatedLabels = () => {\r\n        const { labels } = this.props;\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const updatedLabels = labels.filter(label => {\r\n            //get the correct labels from board\r\n            const foundLabel = boardCopy.labels.find(boardLabel => boardLabel.id === label.id);\r\n            if (foundLabel) return foundLabel;\r\n            return null;\r\n        })\r\n        return updatedLabels;\r\n    }\r\n\r\n    render() {\r\n        const { toggleIsLabelTxtShown } = this;\r\n        const { isLabelTxtShown } = this.props.board;\r\n        const labels = this.getUpdatedLabels();\r\n        const labelClassName = isLabelTxtShown ? 'shown' : '';\r\n        return (\r\n            <div className=\"labels-container flex wrap\">\r\n\r\n                {labels.map(label => <span title={label.txt} className={`label ${labelClassName}`}\r\n                    style={{ backgroundColor: label.color }}\r\n                    onClick={toggleIsLabelTxtShown} key={label.id}>\r\n                    <span className=\"label-txt\">\r\n                        {isLabelTxtShown && label.txt}</span>\r\n                </span>)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard,\r\n}\r\n\r\nexport const CardLabels = connect(mapStateToProps, mapDispatchToProps)(_CardLabels)","import React from 'react';\r\nimport moment from 'moment';\r\nimport { AccessTime } from '@material-ui/icons';\r\n\r\nexport const DueBadge = ({ dueDate }) => {\r\n\r\n    const displayDate = dueDate ? moment(dueDate).format(\"MMM Do\") : null;\r\n    const isDueClose = ((dueDate - Date.now()) < 86400000) ? true : false;\r\n    const isDuePassed = Date.now() > dueDate ? true : false;\r\n    const backgroundColor = isDuePassed ? '#eb5a46' : isDueClose ? '#f2d600' : '';\r\n    const color = !backgroundColor ? '#5e6c84' : '#fff';\r\n\r\n    return (\r\n        <div style={{ backgroundColor, color }}\r\n            className=\"card-due flex align-center\"> <span className=\"due-icon\">\r\n                <AccessTime fontSize=\"small\" /></span>{displayDate}</div>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport function MemberInitials(props) {\r\n\r\n\r\n    var firstLastName;\r\n    if (props.member) {\r\n        firstLastName = props.member.fullName.split(' ');\r\n    } else {\r\n        firstLastName = props.fullName.split(' ');\r\n    }\r\n\r\n    const initials = firstLastName.map(str => str.charAt(0)).join('').slice(0, 2);\r\n    const { member } = props;\r\n    return (\r\n        <div title={firstLastName.join(' ')} className=\"member-avatar\">\r\n            {(!member || !member.img) && <span className='member-initial'>{initials.toUpperCase()}</span>}\r\n            {member && member.img && <span style={{ backgroundImage: \"url(\" + member.img + \")\" }}\r\n                className=\"member-initial-img\" ></span>}\r\n        </div>\r\n\r\n    )\r\n}\r\n// className=\"member-img\"","import React from 'react';\r\nimport { CreateOutlined, Check } from '@material-ui/icons';\r\n\r\nexport function LabelEdit(props) {\r\n\r\n    const { label, toggleEditMode } = props;\r\n    const isLabelOnCard = props.card.labels.some(lbl => lbl.id === label.id);\r\n    return (\r\n        <div className=\"label-edit flex align-center\">\r\n            <span onClick={() => { props.toggleLabelOnCard(label) }}\r\n                className=\"grow flex align-center\" style={{ backgroundColor: label.color }}>\r\n                {label.txt}{isLabelOnCard && <Check className=\"icon\" />}\r\n            </span>\r\n            <button onClick={() => { toggleEditMode(label) }}>\r\n                <CreateOutlined className=\"icon\" /></button>\r\n        </div >\r\n    );\r\n}\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { updateBoard } from '../store/actions/boardActions';\r\nimport { Clear } from '@material-ui/icons';\r\nimport { boardService } from '../services/boardService';\r\nimport { LabelEdit } from './LabelEdit';\r\n\r\nclass _LabelsEdit extends Component {\r\n\r\n    state = {\r\n        editLabel: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('keydown', this.hideLabelsEdit);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('keydown', this.hideLabelsEdit);\r\n    }\r\n\r\n    hideLabelsEdit = (ev) => {\r\n        if (ev.code === 'Escape') this.props.toggleProperty('isLabelEditShown');\r\n    }\r\n\r\n    toggleEditMode = (editLabel) => {\r\n        this.setState({ editLabel });\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        this.setState(prevState => ({\r\n            editLabel: {\r\n                ...prevState.editLabel,\r\n                txt: target.value\r\n            }\r\n        }));\r\n    }\r\n\r\n    saveLabel = async (ev) => {\r\n        ev.preventDefault();\r\n        const editedLabel = this.state.editLabel;\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n\r\n        boardCopy.labels = boardCopy.labels.map(label => {\r\n            if (label.id === editedLabel.id) return editedLabel;\r\n            return label;\r\n        })\r\n        await this.props.updateBoard(boardCopy);// The await might be neccessary when working with DB\r\n        this.toggleEditMode();\r\n    }\r\n\r\n    toggleLabelOnCard = (label) => {\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const cardId = this.props.card.id;\r\n\r\n        // Getting the access to the card labels inside the board\r\n        const phaseIdx = boardCopy.phaseLists.findIndex(phase =>\r\n            phase.cards.some(card => card.id === cardId)\r\n        )\r\n        const cardIdx = boardCopy.phaseLists[phaseIdx].cards.findIndex(card => card.id === cardId);\r\n        const card = boardCopy.phaseLists[phaseIdx].cards[cardIdx];\r\n\r\n        //Checking if the card has the label or not and flip it\r\n        if (card.labels.some(lbl => lbl.id === label.id)) {\r\n            card.labels = card.labels.filter(lbl => lbl.id !== label.id);\r\n        } else {\r\n            card.labels.push(label);\r\n        }\r\n        boardCopy.phaseLists[phaseIdx].cards[cardIdx] = card;\r\n\r\n        this.props.updateBoard(boardCopy);\r\n    }\r\n\r\n    render() {\r\n        const { toggleEditMode, saveLabel, toggleLabelOnCard } = this;\r\n        const { editLabel } = this.state;\r\n        const { labels } = this.props.board;\r\n        return (\r\n            <section className=\"edit-labels\">\r\n                <div className=\"edit-labels-header flex align-center\">\r\n                    <p className=\"grow\">Labels</p>\r\n                    <button onClick={() => { this.props.toggleProperty('isLabelEditShown') }}>\r\n                        <Clear /></button>\r\n                </div>\r\n                <div className=\"labels-gallery\">\r\n                    {!editLabel && labels.map(label => <LabelEdit toggleLabelOnCard={toggleLabelOnCard}\r\n                        card={this.props.card} saveLabel={saveLabel} key={label.id} label={label}\r\n                        toggleEditMode={toggleEditMode} />)}\r\n\r\n                    {editLabel && <div>\r\n                        <form onSubmit={saveLabel}>\r\n                            <input type=\"text\" name=\"txt\" value={editLabel.txt} autoFocus\r\n                                autoComplete=\"off\" spellCheck=\"false\" onChange={this.handleChange} />\r\n                            <button className=\"save-btn\">Save</button>\r\n                        </form>\r\n                        <button className=\"cancel-btn\" onClick={() => { toggleEditMode(null) }}>\r\n                            Cancel</button>\r\n                    </div>}\r\n\r\n                </div>\r\n\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard\r\n}\r\n\r\nexport const LabelsEdit = connect(mapStateToProps, mapDispatchToProps)(_LabelsEdit)","import React from 'react'\r\nimport { Check } from '@material-ui/icons';\r\n\r\nexport function MemberEdit(props) {\r\n    const { member, toggleMemberOnCard } = props;\r\n    const isMemberOnCard = props.card.assignedTo.some(mmbr => mmbr._id === member._id);\r\n    const firstLastName = member.fullName.toUpperCase().split(' ');\r\n    const initials = firstLastName.map(str => str.charAt(0)).join('').slice(0, 2);\r\n\r\n    return (\r\n        <div onClick={() => { toggleMemberOnCard(member) }}\r\n            className=\"member-item flex align-center\">\r\n            {!member.img && <div className=\"initials\"><span>{initials}</span></div>}\r\n            {member.img && <span style={{ backgroundImage: \"url(\" + member.img + \")\" }}\r\n                className=\"member-img\"></span>}\r\n            {member.fullName}{isMemberOnCard && <Check className=\"icon\" />}\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Clear } from '@material-ui/icons';\r\nimport { MemberEdit } from './MemberEdit';\r\nimport { boardService } from '../services/boardService';\r\nimport { connect } from 'react-redux';\r\nimport { updateBoard } from '../store/actions/boardActions';\r\n\r\nexport class _MembersEdit extends Component {\r\n\r\n    state = {\r\n        name: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('keydown', this.hideMembersEdit);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('keydown', this.hideMembersEdit);\r\n    }\r\n\r\n    hideMembersEdit = (ev) => {\r\n        if (ev.code === 'Escape') this.props.toggleProperty('isMembersEditShown');\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        this.setState({ name: target.value });\r\n    }\r\n\r\n    toggleMemberOnCard = (member) => {\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const cardId = this.props.card.id;\r\n\r\n        // Getting the access to the card members inside the board\r\n        const phaseIdx = boardCopy.phaseLists.findIndex(phase =>\r\n            phase.cards.some(card => card.id === cardId)\r\n        )\r\n        const cardIdx = boardCopy.phaseLists[phaseIdx].cards.findIndex(card => card.id === cardId);\r\n        const card = boardCopy.phaseLists[phaseIdx].cards[cardIdx];\r\n\r\n        //Checking if the member is assigned or not and flip it\r\n        if (card.assignedTo.some(mmbr => mmbr._id === member._id)) {\r\n            card.assignedTo = card.assignedTo.filter(mmbr => mmbr._id !== member._id);\r\n        } else card.assignedTo.push(member);\r\n\r\n        boardCopy.phaseLists[phaseIdx].cards[cardIdx] = card;\r\n        this.props.updateBoard(boardCopy);\r\n    }\r\n\r\n    render() {\r\n        const { members, toggleProperty, card } = this.props;\r\n        const { name } = this.state;\r\n        const membersToDisplay = members.filter(mmbr =>\r\n            mmbr.fullName.toLowerCase().includes(name.toLowerCase()));\r\n        return (\r\n            <section className=\"edit-members\">\r\n                <div className=\"edit-members-header flex align-center\">\r\n                    <p className=\"grow\">Members</p>\r\n                    <button onClick={() => { toggleProperty('isMembersEditShown') }}><Clear /></button>\r\n                </div>\r\n                <input className=\"search-name\" onChange={this.handleChange} autoComplete=\"off\"\r\n                    type=\"search\" name=\"name\" value={name} placeholder=\"Search members\" />\r\n                <div className=\"members-gallery\">\r\n                    {members && membersToDisplay.map(member =>\r\n                        <MemberEdit toggleMemberOnCard={this.toggleMemberOnCard} card={card}\r\n                            key={member._id} member={member} />)}\r\n                </div>\r\n\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard,\r\n}\r\n\r\nexport const MembersEdit = connect(mapStateToProps, mapDispatchToProps)(_MembersEdit)","import React, { Component } from 'react';\r\nimport { Clear } from '@material-ui/icons';\r\nimport { DateTimePicker } from '@material-ui/pickers';\r\n\r\nexport class DueDateEdit extends Component {\r\n\r\n    state = {\r\n        dueDate: 0\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('keydown', this.hideDueDateEdit);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('keydown', this.hideDueDateEdit);\r\n    }\r\n\r\n    hideDueDateEdit = (ev) => {\r\n        if (ev.code === 'Escape') this.props.toggleProperty('isDueDateEditShown');\r\n    }\r\n\r\n    handleDateChange = date => {\r\n        this.setState({ dueDate: date._d.getTime() })\r\n    }\r\n\r\n    handleSave = () => {\r\n        this.props.changeDueDate(this.state.dueDate);\r\n        this.props.toggleProperty('isDueDateEditShown');\r\n    }\r\n\r\n    removeDueDate = () => {\r\n        this.props.changeDueDate(null);\r\n        this.props.toggleProperty('isDueDateEditShown');\r\n    }\r\n\r\n    render() {\r\n        const { toggleProperty } = this.props;\r\n        const { dueDate } = this.state;\r\n        return (\r\n            <div className=\"date-picker\">\r\n                <div className=\"date-picker-header flex align-center\">\r\n                    <p className=\"grow\">Change Due Date</p>\r\n                    <button onClick={() => { toggleProperty('isDueDateEditShown') }}>\r\n                        <Clear className=\"icon\" /></button>\r\n                </div>\r\n                <div className=\"date-picker-content flex column justify-center\">\r\n                    <DateTimePicker className=\"picker-input\"\r\n                        disablePast=\"true\"\r\n                        views={[\"date\", \"month\", \"hours\", \"minutes\"]}\r\n                        minDateMessage=\"\"\r\n                        value={dueDate} onChange={this.handleDateChange} />\r\n                    <div className=\"flex space-between\">\r\n                        <button onClick={this.removeDueDate}\r\n                            className=\"remove-btn\">Remove</button>\r\n                        <button onClick={this.handleSave} className=\"save-btn\">Save</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { updateBoard } from '../store/actions/boardActions';\r\nimport { boardService } from '../services/boardService';\r\nimport {\r\n    DeleteForeverOutlined, AccessTime,\r\n    PersonOutlineOutlined, LabelOutlined\r\n} from '@material-ui/icons';\r\nimport { LabelsEdit } from './LabelsEdit';\r\nimport { MembersEdit } from './MembersEdit';\r\nimport { DueDateEdit } from './DueDateEdit';\r\n\r\nexport class _CardMenu extends Component {\r\n\r\n    state = {\r\n        card: {\r\n            title: '',\r\n            dueDate: 0,\r\n            labels: [],\r\n            assignedTo: []\r\n        },\r\n        isLabelEditShown: false,\r\n        isMembersEditShown: false,\r\n        isDueDateEditShown: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('keydown', this.hideMenu);\r\n        this.titleInput.addEventListener(\"keypress\", this.submitOnEnter);\r\n        const { title, dueDate, labels, assignedTo } = this.props.card;\r\n        this.setState({ card: { title, dueDate, labels, assignedTo } });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('keydown', this.hideMenu);\r\n        this.titleInput.removeEventListener(\"keypress\", this.submitOnEnter);\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        this.setState({ card: { title: target.value } });\r\n    }\r\n\r\n    submitOnEnter(ev) {\r\n        // this allows Shift+Enter = new line, Enter = submit form\r\n        if (ev.which === 13 && !ev.shiftKey) {\r\n            ev.target.form.dispatchEvent(new Event(\"submit\", { cancelable: true }));\r\n            ev.preventDefault();\r\n        }\r\n    }\r\n\r\n    hideMenu = (ev) => {\r\n        const { isLabelEditShown, isMembersEditShown, isDueDateEditShown } = this.state;\r\n        if (ev.code === 'Escape' && !isLabelEditShown\r\n            && !isMembersEditShown && !isDueDateEditShown\r\n        ) this.props.toggleIsMenuShown();\r\n    }\r\n\r\n    getPhaseIdxByCardId = (cardId) => {\r\n        return this.props.board.phaseLists.findIndex(phase =>\r\n            phase.cards.some(card => card.id === cardId))\r\n    }\r\n\r\n    onDelete = () => {\r\n        const { id } = this.props.card;//getting the id and boardCopy\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const phaseIdx = this.getPhaseIdxByCardId(id);\r\n        //getting the phaseIdx to edit his cards\r\n\r\n        boardCopy.phaseLists[phaseIdx].cards =\r\n            boardCopy.phaseLists[phaseIdx].cards.filter(card => card.id !== id);\r\n        //filtering out the deleted card\r\n        this.props.updateBoard(boardCopy);\r\n        this.props.toggleIsMenuShown();//Closing the menu\r\n    }\r\n\r\n    onChangeTitle = () => {\r\n        if (!this.state.card.title.trim()) return;\r\n        const { id } = this.props.card;\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const phaseIdx = this.getPhaseIdxByCardId(id);\r\n        //Getting access to the card inside the board\r\n\r\n        boardCopy.phaseLists[phaseIdx].cards.filter(card => {\r\n            if (card.id !== id) return card;\r\n            else {\r\n                card.title = this.state.card.title;\r\n                return card;\r\n            }\r\n        });\r\n        this.props.updateBoard(boardCopy);\r\n        this.props.toggleIsMenuShown();//Closing the menu\r\n    }\r\n\r\n    changeDueDate = newDate => {\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const cardId = this.props.card.id;\r\n        const phaseIdx = this.getPhaseIdxByCardId(cardId);\r\n        const cardIdx = boardCopy.phaseLists[phaseIdx].cards.findIndex(card => card.id === cardId);\r\n        //Getting access to the card inside the board\r\n\r\n        boardCopy.phaseLists[phaseIdx].cards[cardIdx].dueDate = newDate;\r\n        this.props.updateBoard(boardCopy);\r\n    }\r\n\r\n    toggleProperty = property => {\r\n        this.setState(prevState => ({ [property]: !prevState[property] }));\r\n    }\r\n\r\n    render() {\r\n        const { onDelete, handleChange, onChangeTitle, toggleProperty, changeDueDate } = this;\r\n        const { clientX, clientY } = this.props;\r\n        const { isLabelEditShown, card, isMembersEditShown, isDueDateEditShown } = this.state;\r\n        const { title } = card;\r\n        return (\r\n            <section>\r\n                <div onMouseDown={this.props.toggleIsMenuShown} className=\"screen\"></div>\r\n                <section style={{ top: clientY - 10, left: clientX - 220 }}\r\n                    className=\"menu-container flex\">\r\n\r\n                    <form onSubmit={onChangeTitle} className=\"edit-card-form flex column\">\r\n                        <textarea onChange={handleChange} name=\"title\" value={title} cols=\"30\" rows=\"5\"\r\n                            ref={el => this.titleInput = el} spellCheck=\"false\" autoComplete=\"off\" autoFocus />\r\n                        <button onClick={onChangeTitle} className=\"save-btn\">Save</button>\r\n                    </form>\r\n\r\n                    <div className=\"card-menu flex column\">\r\n                        <button onClick={() => { toggleProperty('isLabelEditShown') }} className=\"flex align-center\">\r\n                            <LabelOutlined className=\"icon\" />Edit Labels</button>\r\n                        {isLabelEditShown &&\r\n                            <LabelsEdit card={this.props.card} toggleProperty={toggleProperty} />}\r\n\r\n                        <button onClick={() => { toggleProperty('isMembersEditShown') }} className=\"flex align-center\">\r\n                            <PersonOutlineOutlined className=\"icon\" />Change Members</button>\r\n                        {isMembersEditShown && <MembersEdit card={this.props.card}\r\n                            members={this.props.board.members}\r\n                            toggleProperty={toggleProperty} />}\r\n\r\n                        <button onClick={() => { toggleProperty('isDueDateEditShown') }}\r\n                            className=\"flex align-center\">\r\n                            <AccessTime className=\"icon\" />Change Due Date</button>\r\n                        {isDueDateEditShown && <DueDateEdit changeDueDate={changeDueDate}\r\n                            toggleProperty={toggleProperty} />}\r\n\r\n                        <button onClick={onDelete} className=\"flex align-center\">\r\n                            <DeleteForeverOutlined className=\"icon\" />Delete</button>\r\n                    </div>\r\n\r\n                </section>\r\n            </section >\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard\r\n}\r\n\r\nexport const CardMenu = connect(mapStateToProps, mapDispatchToProps)(_CardMenu)","import React from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport { CardLabels } from './CardLabels';\r\nimport { AttachmentOutlined, CheckBoxOutlined, CreateOutlined } from '@material-ui/icons';\r\nimport { loadBoard, setCard } from '../store/actions/boardActions';\r\nimport { connect } from 'react-redux';\r\nimport { DueBadge } from './DueBadge';\r\nimport { MemberInitials } from './MemberInitials';\r\nimport { CardMenu } from './CardMenu';\r\n\r\n\r\n// const getDragStyle = (style, snapshot) => {\r\n//     if (!snapshot.isDragging) return;\r\n\r\n//     return {\r\n//         ...style,\r\n//         \"backgroundColor\": \"lightBlue\"\r\n\r\n//     };\r\n\r\n// }\r\n\r\nclass _CardPreview extends React.Component {\r\n\r\n    state = {\r\n        isMenuShown: false,\r\n        clientX: '',\r\n        clientY: '',\r\n    }\r\n\r\n    toggleIsMenuShown = (ev) => {\r\n        if (ev) {\r\n            ev.stopPropagation();\r\n            ev.persist();\r\n            const { clientX, clientY } = ev;\r\n            this.setState(prevState => ({ isMenuShown: !prevState.isMenuShown, clientX, clientY }));\r\n        } else {\r\n            this.setState(prevState => ({ isMenuShown: !prevState.isMenuShown }));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { toggleIsMenuShown, state } = this;\r\n        const { isMenuShown, clientX, clientY } = state;\r\n        const { title, bgColor, imgUrl, dueDate, labels, checkList, assignedTo, attachments } = this.props.card;\r\n        const checklistDoneCount = checkList.filter(item => item.isDone).length;\r\n        const checklistBgc = checklistDoneCount === checkList.length ? '#61bd4f' : '';\r\n        const checklistColor = checklistBgc ? '#fff' : '';\r\n        return (\r\n            <React.Fragment>\r\n\r\n                {isMenuShown && <CardMenu card={this.props.card} clientY={clientY} clientX={clientX}\r\n                    toggleIsMenuShown={toggleIsMenuShown} />}\r\n\r\n                <Draggable draggableId={this.props.card.id} index={this.props.index}>\r\n                    {(provided, snapshot) => (\r\n                        <section onClick={() => { this.props.setCard(this.props.card) }}\r\n                            style={{ backgroundColor: bgColor }} className=\"card-preview flex column\"\r\n                            {...provided.draggableProps} {...provided.dragHandleProps} ref={provided.innerRef}\r\n                        // style={getDragStyle(provided.draggableProps.style, snapshot)}\r\n                        >\r\n\r\n                            <button onClick={toggleIsMenuShown}\r\n                                className=\"show-menu-btn\">\r\n                                <CreateOutlined className=\"show-menu-icon\" />\r\n                            </button>\r\n\r\n                            {imgUrl && <div className=\"card-img\"><img alt=\"Card\" src={imgUrl} /></div>}\r\n                            {labels && <CardLabels labels={labels} />}\r\n\r\n                            <p>{title}</p>\r\n\r\n                            <div className=\"card-badges flex wrap\">\r\n                                {dueDate && <DueBadge dueDate={dueDate} />}\r\n\r\n                                {attachments.length > 0 &&\r\n                                    <div className=\"attach-badge flex align-center\">\r\n                                        <AttachmentOutlined className=\"attach-icon\" />\r\n                                        <span>{attachments.length}</span>\r\n                                    </div>}\r\n\r\n                                {checkList.length > 0 &&\r\n                                    <div style={{ backgroundColor: checklistBgc, color: checklistColor }}\r\n                                        className=\"checklist-badge flex align-center\">\r\n                                        <span><CheckBoxOutlined className=\"checklist-icon\" />\r\n                                        </span>\r\n                                        <span>{checklistDoneCount}/{checkList.length}</span>\r\n                                    </div>}\r\n                            </div>\r\n                            <div className=\"members-badge flex align-center\">\r\n                                {assignedTo.length > 0 &&\r\n                                    assignedTo.map((member) => <MemberInitials key={member._id} member={member} />)}\r\n                            </div>\r\n                        </section>\r\n                    )}\r\n                </Draggable>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    setCard\r\n}\r\n\r\nexport const CardPreview = connect(mapStateToProps, mapDispatchToProps)(_CardPreview)","import React, { Component } from 'react';\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport { MoreHoriz, Close, Add } from '@material-ui/icons';\r\nimport { AddCard } from './AddCard';\r\nimport { CardPreview } from './CardPreview';\r\nimport { connect } from 'react-redux';\r\nimport { updateBoard } from '../store/actions/boardActions';\r\nimport { boardService } from '../services/boardService';\r\n\r\n\r\n// const getDragStyle = (style, snapshot) => {\r\n//     if (!snapshot.isDragging) return;   \r\n//     return {\r\n//         ...style,\r\n//         \"backgroundColor\": \"lightBlue\"\r\n\r\n//     };\r\n\r\n// }\r\n\r\n\r\nexport class _PhasePreview extends Component {\r\n\r\n    state = {\r\n        isInputShown: false,\r\n        isMenuShown: false,\r\n        isSortShown: false,\r\n        newPhaseName: '',\r\n        isAddCardShown: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ newPhaseName: this.props.phase.name })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('keydown', this.hideInput);\r\n    }\r\n\r\n    toggleInputShown = () => {\r\n        if (!this.state.isInputShown) window.addEventListener('keydown', this.hideInput);\r\n        else window.removeEventListener('keydown', this.hideInput);\r\n        this.setState(prevState => ({ isInputShown: !prevState.isInputShown }))\r\n    }\r\n\r\n    hideInput = (ev) => {\r\n        if (ev.code === 'Escape' || ev.type === 'onblur') {\r\n            this.setState({ isInputShown: false });\r\n            window.removeEventListener('keydown', this.hideInput);\r\n        }\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        this.setState({ newPhaseName: target.value })\r\n    }\r\n\r\n    handleSubmit = (ev) => {\r\n        ev.preventDefault();\r\n        if (!this.state.newPhaseName.trim()) return;\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const { id } = this.props.phase;\r\n        const phaseIdx = boardCopy.phaseLists.findIndex(phase => phase.id === id);\r\n        boardCopy.phaseLists[phaseIdx].name = this.state.newPhaseName;\r\n        this.props.updateBoard(boardCopy);\r\n        this.toggleInputShown();\r\n    }\r\n\r\n    toggleMenuShown = () => {\r\n        if (this.state.isSortShown) {\r\n            //making sure menu returns to default \"state\"\r\n            this.setState({ isMenuShown: false, isSortShown: false });\r\n        } else this.setState(prevState => ({ isMenuShown: !prevState.isMenuShown }));\r\n    }\r\n\r\n    showAddCard = () => {\r\n        this.setState({ isAddCardShown: true });\r\n        this.toggleMenuShown();\r\n    }\r\n\r\n    toggleAddCardShown = () => {\r\n        this.setState(prevState => ({ isAddCardShown: !prevState.isAddCardShown }));\r\n    }\r\n\r\n    toggleIsSortShown = () => {\r\n        this.setState(prevState => ({ isSortShown: !prevState.isSortShown }));\r\n    }\r\n\r\n    sortListBy = (sortBy) => {\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const { id } = this.props.phase;\r\n        const phase = boardCopy.phaseLists.find(phase => phase.id === id);\r\n        const sortedPhase = boardService.getSortedPhase(sortBy, phase);\r\n        boardCopy.phaseLists = boardCopy.phaseLists.filter(phase => phase.id ===\r\n            sortedPhase.id ? sortedPhase : phase);\r\n        this.props.updateBoard(boardCopy);\r\n        this.toggleIsSortShown();//to close the menu\r\n        this.toggleMenuShown();\r\n    }\r\n\r\n    onDeletePhase = () => {\r\n        this.toggleMenuShown();\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        boardCopy.phaseLists = boardCopy.phaseLists.filter(phase => phase.id !== this.props.phase.id);\r\n        this.props.updateBoard(boardCopy);\r\n    }\r\n\r\n    render() {\r\n        const { name, id, cards } = this.props.phase;\r\n        const { newPhaseName, isInputShown, isMenuShown, isSortShown, isAddCardShown } = this.state;\r\n\r\n        return (\r\n            <Draggable draggableId={id} index={this.props.index}>\r\n                {(provided, snapshot) => (\r\n                    <article className=\"phase flex column\"\r\n                        {...provided.draggableProps}\r\n                        ref={provided.innerRef}\r\n                        {...snapshot.isDropAnimating = true}\r\n                    // style={getDragStyle(provided.draggableProps.style, snapshot)}\r\n                    >\r\n                        <div {...provided.dragHandleProps} className=\"phase-header flex space-between\">\r\n\r\n                            {!isInputShown && <h5 className=\"phase-title grow\"\r\n                                onClick={this.toggleInputShown}>{name}</h5>}\r\n                            {isInputShown && <form className=\"flex grow\" onSubmit={this.handleSubmit}>\r\n                                <input className=\"phase-name-input grow\" type=\"text\" name=\"newPhaseName\"\r\n                                    value={newPhaseName} autoFocus autoComplete=\"off\" spellCheck=\"false\"\r\n                                    onBlur={this.toggleInputShown} onChange={this.handleChange} />\r\n                            </form>}\r\n\r\n                            <MoreHoriz className=\"pointer\" onClick={this.toggleMenuShown} />\r\n                            {isMenuShown && <div className=\"phase-menu flex column\">\r\n                                <div className=\"menu-header flex align-center\">\r\n\r\n                                    <h5 className=\"grow\">List Actions</h5>\r\n                                    <Close className=\"pointer\" onClick={this.toggleMenuShown} />\r\n                                </div>\r\n                                <div className=\"menu-btns flex column\">\r\n                                    <button onClick={this.showAddCard} >Add A Card</button>\r\n                                    <button onClick={this.toggleIsSortShown}>Sort By..</button>\r\n                                    {isSortShown && <div className=\"sort-options flex column\">\r\n                                        <button onClick={() => {\r\n                                            this.sortListBy('title')\r\n                                        }}>Title</button>\r\n                                        <button onClick={() => {\r\n                                            this.sortListBy('firstCreated')\r\n                                        }}>First Created</button>\r\n                                        <button onClick={() => {\r\n                                            this.sortListBy('lastCreated')\r\n                                        }}>Last Created</button>\r\n                                    </div>}\r\n                                    <button onClick={this.onDeletePhase}>Delete List</button>\r\n\r\n                                </div>\r\n                            </div>}\r\n                        </div>\r\n                        <Droppable droppableId={id}>\r\n                            {(provided) => (\r\n                                <div className=\"cards-list\" ref={provided.innerRef} {...provided.droppableProps}>\r\n                                    {cards.map((card, index) => <CardPreview key={card.id} card={card} index={index} />)}\r\n                                    {provided.placeholder}\r\n                                    <AddCard isAddCardShown={isAddCardShown} bottomCard={this.bottomCard}\r\n                                        toggleAddCardShown={this.toggleAddCardShown} phaseId={this.props.phase.id} />\r\n                                    <div style={{ opacity: 0 }} ref={el => this.bottomCard = el}></div>\r\n                                </div>\r\n                            )}\r\n                        </Droppable>\r\n                        {!isAddCardShown && <button onClick={this.toggleAddCardShown}\r\n                            className=\"add-card-btn flex align-center\">\r\n                            <Add className=\"add-icon\" fontSize=\"large\" />Add a card</button>}\r\n                    </article>\r\n                )}\r\n            </Draggable>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard,\r\n}\r\n\r\nexport const PhasePreview = connect(mapStateToProps, mapDispatchToProps)(_PhasePreview)","import React, { Component } from 'react';\r\nimport { PhasePreview } from './PhasePreview';\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd'\r\nimport { Add, Close } from '@material-ui/icons';\r\nimport { connect } from 'react-redux';\r\nimport { updateBoard, LOGGED_IN_USER } from '../store/actions/boardActions';\r\nimport { boardService, OPERETIONS, TYPES } from '../services/boardService';\r\n\r\nexport class _PhaseList extends Component {\r\n    state = {\r\n        board: null,\r\n        isInputShown: false,\r\n        newListName: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ board: this.props.board })\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (JSON.stringify(prevProps.board) !== JSON.stringify(this.props.board)) {\r\n            this.setState({ board: this.props.board })\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.removeEventListeners();\r\n    }\r\n\r\n    toggleInputShown = () => {\r\n        if (!this.state.isInputShown) this.addEventListeners();\r\n        else this.removeEventListeners();\r\n        this.setState(prevState => ({ isInputShown: !prevState.isInputShown }))\r\n    }\r\n\r\n    hideInput = (ev) => {\r\n        //To allow closing the input through Escape/click on something else\r\n        // Cannot use 'onBlur', in order to allow adding lists in a row(Try at trello)\r\n        if ((ev.code === 'Escape' || ev.target !== this.listNameInput)\r\n            && ev.target !== this.submitBtn) {\r\n            this.setState({ isInputShown: false });\r\n            this.removeEventListeners();\r\n        }\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        this.setState(prevState => ({ ...prevState, newListName: target.value }));\r\n    }\r\n\r\n    addEventListeners = () => {\r\n        window.addEventListener('keydown', this.hideInput);\r\n        window.addEventListener('mousedown', this.hideInput);\r\n    }\r\n\r\n    removeEventListeners = () => {\r\n        window.removeEventListener('keydown', this.hideInput);\r\n        window.removeEventListener('mousedown', this.hideInput);\r\n    }\r\n\r\n    onAddPhase = async (ev) => {\r\n        ev.preventDefault();\r\n        if (!this.state.newListName.trim()) return;\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const newPhase = boardService.getNewPhase(this.state.newListName);\r\n        boardCopy.phaseLists.push(newPhase);\r\n        await this.props.updateBoard(boardCopy);\r\n        this.setState({ newListName: '' }, () => {\r\n            this.listForm.scrollIntoView({ inline: 'end', behavior: 'smooth' });\r\n        });\r\n    }\r\n\r\n    onDragEnd = result => {\r\n\r\n        const { destination, source, type } = result;\r\n        if (!destination) return;\r\n        if (destination.droppableId === source.droppableId && destination.index === source.index) return;\r\n\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        if (type === 'PhasePreview') {\r\n\r\n            const newPhasesOrder = boardCopy.phaseLists;\r\n            const movingPhase = newPhasesOrder.splice(source.index, 1)[0];\r\n            newPhasesOrder.splice(destination.index, 0, movingPhase);\r\n\r\n        } else {\r\n            const { phaseLists } = boardCopy;\r\n            const srcPhase = phaseLists.find(phase => phase.id === source.droppableId);\r\n            const dstPhase = phaseLists.find(phase => phase.id === destination.droppableId);\r\n\r\n\r\n            if (srcPhase.id === dstPhase.id) {\r\n                const movingCard = srcPhase.cards.splice(source.index, 1)[0];\r\n                srcPhase.cards.splice(destination.index, 0, movingCard);\r\n\r\n\r\n            } else {\r\n                const srcCards = srcPhase.cards;\r\n                const movingCard = srcCards.splice(source.index, 1)[0];\r\n                const dstCards = dstPhase.cards;\r\n                dstCards.splice(destination.index, 0, movingCard);\r\n                boardService.addActivity(boardCopy,\r\n                    LOGGED_IN_USER,\r\n                    OPERETIONS.UPDATE,\r\n                    TYPES.CARD, {\r\n                    id: movingCard.id,\r\n                    title: movingCard.title\r\n                },\r\n                    `moved card from ${srcPhase.name} to ${dstPhase.name} -Card:`);\r\n            }\r\n        }\r\n\r\n        this.props.updateBoard(boardCopy);\r\n\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        if (!this.state.board) return 'loading..'\r\n        const { toggleInputShown, onAddPhase, handleChange, hideInput } = this;\r\n        const { isInputShown, newListName } = this.state;\r\n        const { phaseLists } = this.state.board;\r\n\r\n        return (\r\n\r\n            <DragDropContext onDragEnd={this.onDragEnd}>\r\n                <Droppable droppableId=\"all-columns\" direction=\"horizontal\" type=\"PhasePreview\">\r\n                    {provided => (\r\n                        <section className=\"phase-list flex grow\"  {...provided.droppableProps} ref={provided.innerRef} >\r\n                            {phaseLists && phaseLists.map((phase, index) => <PhasePreview key={phase.id} index={index}\r\n                                phase={phase} />)}\r\n\r\n                            {!isInputShown && <button className=\"add-list-btn flex align-center\"\r\n                                onClick={toggleInputShown}> <Add fontSize=\"small\" />Add new list</button>}\r\n\r\n                            {isInputShown && <form ref={el => this.listForm = el} className=\"add-list-form\"\r\n                                onSubmit={onAddPhase}>\r\n                                <input ref={el => this.listNameInput = el} type=\"text\" autoFocus spellCheck=\"false\"\r\n                                    name=\"newListName\" onChange={handleChange} required autoComplete=\"off\"\r\n                                    placeholder=\"Enter list title..\" value={newListName} />\r\n                                <div className=\"flex align-center\">\r\n                                    <button ref={el => this.submitBtn = el} className=\"submit-btn\"\r\n                                        type=\"submit\">Add List</button>\r\n                                    <Close className=\"cancel-btn pointer\" onClick={hideInput} />\r\n                                </div>\r\n                            </form>}\r\n                            {provided.placeholder}\r\n                        </section>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard,\r\n}\r\n\r\nexport const PhaseList = connect(mapStateToProps, mapDispatchToProps)(_PhaseList)","import React from 'react';\r\nimport moment from 'moment';\r\nimport { updateBoard, setCard } from '../store/actions/boardActions';\r\nimport { connect } from 'react-redux';\r\nimport { MemberInitials } from '../cmps/MemberInitials';\r\nclass _Activity extends React.Component {\r\n\r\n    dynamicActivity = (activity) => {\r\n\r\n        const { at, user, type, object, operation, desc } = activity;\r\n\r\n        var userElmemnt = null;\r\n        var elmentType = null;\r\n        if (desc) {\r\n            userElmemnt = <a className=\"activity-user\" href={`/user/${user._id}`} target=\"_blank\" rel=\"noopener noreferrer\">{user.fullName}</a>;\r\n\r\n            return (\r\n                <div className=\"activity flex\">\r\n                    <MemberInitials fullName={user.fullName} />\r\n                    <div className=\"activity-content flex column\">\r\n                        <span>{userElmemnt} {` ${desc}`}</span>\r\n                        <span onClick={this.OpenByObjectType} className=\"activity-object\" >{object.title}</span>\r\n                        <div className=\"activity-time\">{moment(at).fromNow()}</div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n\r\n            if (!user) return <div style={{ \"display\": \"none\" }}>stam</div>\r\n\r\n            userElmemnt = <a className=\"activity-user\" href={`/user/${user._id}`} target=\"_blank\" rel=\"noopener noreferrer\">{user.fullName}</a>;\r\n\r\n            elmentType = <span onClick={this.OpenByObjectType} className=\"activity-object\" >{object.title}</span>;\r\n\r\n            return (\r\n\r\n                < div className=\"activity flex\" >\r\n                    <MemberInitials fullName={user.fullName} />\r\n                    <div className=\"activity-content flex column\">\r\n                        <span>{userElmemnt} {` ${operation} ${type}`} {elmentType}</span>\r\n                        <div className=\"activity-time\">{moment(at).fromNow()}</div>\r\n                    </div>\r\n                </div>\r\n            )\r\n\r\n        }\r\n    }\r\n    OpenByObjectType = () => {\r\n        const { type, object, } = this.props.activity;\r\n        // parent is menu and not card and type is card\r\n        if (type.toLowerCase() === 'card' && this.props.allowOpenCard) {\r\n            const boardClone = JSON.parse(JSON.stringify(this.props.board));\r\n            const cardId = object.id;\r\n            const currPhase = boardClone.phaseLists.find(phase => phase.cards.some(card => card.id === cardId));\r\n            const card = currPhase.cards.find(card => card.id === cardId);\r\n            this.props.onCloseMenu(null);\r\n            this.props.setCard(card);\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const { activity } = this.props\r\n        return (\r\n            this.dynamicActivity(activity)\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard,\r\n    setCard\r\n}\r\n\r\nexport const Activity = connect(mapStateToProps, mapDispatchToProps)(_Activity)\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { LOGGED_IN_USER, updateBoard } from '../store/actions/boardActions';\r\nimport { boardService, OPERETIONS, TYPES } from '../services/boardService';\r\nimport { MemberInitials } from '../cmps/MemberInitials';\r\nimport { Activity } from './Activity';\r\nimport { ListOutlined } from '@material-ui/icons';\r\n\r\nclass _Activities extends React.Component {\r\n\r\n    state = {\r\n        txt: '',\r\n\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        var value = target.value\r\n        this.setState({ txt: value })\r\n    }\r\n\r\n    onEnterDown = (ev) => {\r\n        if (ev.which === 13 && !ev.shiftKey) {\r\n            this.handleSaveBoard();\r\n            ev.preventDefault();\r\n        }\r\n    }\r\n\r\n    handleSaveBoard = () => {\r\n\r\n        let boardClone = JSON.parse(JSON.stringify(this.props.board));\r\n        const card = this.props.card;\r\n        if (!this.state.txt.trim()) return;\r\n        boardService.addActivity(boardClone, LOGGED_IN_USER, OPERETIONS.ADD, TYPES.CARD, { id: card.id, title: card.title },\r\n            `commented \"${this.state.txt}\"`);\r\n        this.setState({ txt: '' });\r\n        this.props.updateBoard(boardClone);\r\n    }\r\n\r\n    render() {\r\n        const { activities, showCommentBox } = this.props;\r\n        const { txt } = this.state\r\n        return (\r\n\r\n            <div className=\"activity-container\">\r\n                <div className=\"activity-header flex align-center\">\r\n                    <ListOutlined className=\"activity-icon\" />\r\n                    <span className=\"activity-header-text\">Activity</span>\r\n                </div>\r\n\r\n                {showCommentBox &&\r\n                    <div className=\"flex column\">\r\n                        <div className=\"flex\">\r\n                            <MemberInitials fullName={LOGGED_IN_USER.fullName} />\r\n                            <input type=\"text\" className=\"comment-input\" ref={el => this.cardNameInput = el}\r\n                                placeholder=\"Write a comment...\" onChange={this.handleChange}\r\n                                spellCheck=\"false\"\r\n                                onBlur={this.handleSaveBoard} onKeyDown={this.onEnterDown} value={this.state.txt}></input>\r\n\r\n                        </div>\r\n                        {txt.length > 0 && <button onClick={this.handleSaveBoard} className=\"add-comment-btn\" type=\"submit\">Save</button>}\r\n                    </div>\r\n                }\r\n\r\n                {activities.map((activity, index) => {\r\n                    return <Activity allowOpenCard={!showCommentBox} onCloseMenu={this.props.onCloseMenu} key={index} activity={activity}>\r\n\r\n                    </Activity>\r\n                })}\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard,\r\n}\r\n\r\nexport const Activities = connect(mapStateToProps, mapDispatchToProps)(_Activities)","import React, { Component } from 'react';\r\nimport { CloseOutlined } from '@material-ui/icons';\r\nimport { Activities } from '../Activities'\r\n\r\nexport class BoardMenu extends Component {\r\n\r\n\r\n    render() {\r\n\r\n        const menuClass = !this.props.isMenuShown ? 'board-menu display-none' : 'board-menu'\r\n        const board = this.props.board;\r\n        const boardBg = board.bgColor ? { \"backgroundColor\": board.bgColor } :\r\n            { \"backgroundImage\": `url(\"${board.imgUrl}\")`, \"backgroundSize\": \"cover\" }\r\n        return (\r\n            <div className={menuClass}>\r\n                <div className=\"board-menu-header flex\">\r\n                    <div className=\"board-menu-header-content flex align-center grow\">\r\n                        <h3 className=\"menu-header-title\">Menu</h3>\r\n                        <CloseOutlined onClick={() => this.props.onToggleMenu(null)} className=\"btn-header-menu\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"flex column\">\r\n                    <div className=\"board-menu-content flex column\">\r\n                        <div className=\"board-menu-item flex align-center\" onClick={() => this.props.onToggleMenu('backgroundMenu')}>\r\n                            <div className=\"board-menu-icon\" style={boardBg}></div>\r\n                            <span className=\"board-menu-text\">Change Background</span>\r\n                        </div>\r\n                        <span className=\"board-menu-header-divider\"></span>\r\n                        <Activities onCloseMenu={this.props.onToggleMenu} activities={board.activities} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { CloseOutlined } from '@material-ui/icons/';\r\nimport { loadBoard, updateBoard, LOGGED_IN_USER } from '../../store/actions/boardActions'\r\nimport { boardService, OPERETIONS, TYPES } from '../../services/boardService'\r\nimport { connect } from 'react-redux';\r\nimport { ArrowBackIosOutlined } from '@material-ui/icons';\r\n\r\nexport class _ColorMenu extends Component {\r\n\r\n    changeBoardColor = (color) => {\r\n\r\n        if (!color) return;\r\n        const clonedBoard = boardService.getBoardCopy(this.props.board);\r\n        clonedBoard.bgColor = color;\r\n        clonedBoard.imgUrl = null;\r\n        boardService.addActivity(clonedBoard, LOGGED_IN_USER, OPERETIONS.UPDATE, TYPES.Board,\r\n            { id: clonedBoard._id, title: clonedBoard.name },\r\n            `change board background color`);\r\n        this.props.updateBoard(clonedBoard);\r\n\r\n    }\r\n\r\n    render() {\r\n        const menuClass = !this.props.isMenuShown ? 'board-menu display-none' : 'board-menu'\r\n        return (\r\n            <div className={menuClass}>\r\n                <div className=\"flex column\">\r\n                    <div className=\"board-menu-header flex justify-center\">\r\n                        <ArrowBackIosOutlined onClick={() => this.props.onToggleMenu(\"backgroundMenu\")} className=\"btn-header-menu\" />\r\n                        <h3 className=\"menu-header-title\">Change Background</h3>\r\n                        <CloseOutlined onClick={() => this.props.onToggleMenu(null)} className=\"btn-header-menu\" />\r\n                    </div>\r\n                  \r\n                    <div className=\"board-menu-content\">\r\n                        <div className=\"flex space-between wrap\">\r\n                            <div className='btn-color'\r\n                                style={{ \"backgroundColor\": \"rgb(0, 121, 191)\" }}\r\n                                onClick={() => this.changeBoardColor(\"rgb(0, 121, 191)\")} >\r\n                            </div>\r\n                            <div className='btn-color'\r\n                                style={{ \"backgroundColor\": \"rgb(210, 144, 52)\" }}\r\n                                onClick={() => this.changeBoardColor(\"rgb(210, 144, 52)\")} >\r\n                            </div>\r\n                            <div className='btn-color'\r\n                                style={{ \"backgroundColor\": \"rgb(81, 152, 57)\" }}\r\n                                onClick={() => this.changeBoardColor(\"rgb(81, 152, 57)\")} >\r\n                            </div>\r\n                            <div className='btn-color'\r\n                                style={{ \"backgroundColor\": \"rgb(176, 70, 50)\" }}\r\n                                onClick={() => this.changeBoardColor(\"rgb(176, 70, 50)\")} >\r\n                            </div>\r\n                            <div className='btn-color'\r\n                                style={{ \"backgroundColor\": \"rgb(137, 96, 158)\" }}\r\n                                onClick={() => this.changeBoardColor(\"rgb(137, 96, 158)\")} >\r\n                            </div>\r\n                            <div className='btn-color'\r\n                                style={{ \"backgroundColor\": \"rgb(205, 90, 145)\" }}\r\n                                onClick={() => this.changeBoardColor(\"rgb(205, 90, 145)\")} >\r\n                            </div>\r\n                            <div className='btn-color'\r\n                                style={{ \"backgroundColor\": \"rgb(75, 191, 107)\" }}\r\n                                onClick={() => this.changeBoardColor(\"rgb(75, 191, 107)\")} >\r\n                            </div>\r\n                            <div className='btn-color'\r\n                                style={{ \"backgroundColor\": \"rgb(0, 174, 204)\" }}\r\n                                onClick={() => this.changeBoardColor(\"rgb(0, 174, 204)\")} >\r\n                            </div>\r\n                            <div className='btn-color'\r\n                                style={{ \"backgroundColor\": \"rgb(131, 140, 145)\" }}\r\n                                onClick={() => this.changeBoardColor(\"rgb(131, 140, 145)\")} >\r\n                            </div>\r\n\r\n\r\n\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    updateBoard\r\n}\r\n\r\nexport const ColorMenu = connect(mapStateToProps, mapDispatchToProps)(_ColorMenu)\r\n","import React, { Component } from 'react'\r\nimport { CloseOutlined } from '@material-ui/icons/';\r\nimport { loadBoard, updateBoard, LOGGED_IN_USER } from '../../store/actions/boardActions'\r\nimport { boardService, OPERETIONS, TYPES } from '../../services/boardService';\r\nimport { unsplashService } from '../../services/unsplashService'\r\nimport { connect } from 'react-redux';\r\nimport { ArrowBackIosOutlined } from '@material-ui/icons';\r\n\r\nexport class _PhotoMenu extends Component {\r\n\r\n    state = {\r\n        imgs: null\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.state.imgs) {\r\n            unsplashService.getListPhotos()\r\n                .then(json => {\r\n                    const imgs = json.map(img => {\r\n                        return {\r\n                            thumbUrl: img.urls.thumb,\r\n                            regularUrl: img.urls.regular,\r\n                            fullUrl: img.urls.full,\r\n                            credit: `${img.user.links.html}?utm_source=Flowz&utm_medium=referral`,\r\n                            userName: `${img.user.name}`\r\n                        }\r\n                    })\r\n                    this.setState({ imgs }, () => {\r\n                    });\r\n                })\r\n        }\r\n\r\n    }\r\n\r\n    changeBoardImg = (img) => {\r\n\r\n        if (!img) return;\r\n        const clonedBoard = boardService.getBoardCopy(this.props.board);\r\n        clonedBoard.imgUrl = img;\r\n        clonedBoard.bgColor = null;\r\n        boardService.addActivity(clonedBoard, LOGGED_IN_USER, OPERETIONS.UPDATE, TYPES.Board,\r\n            { id: clonedBoard._id, title: clonedBoard.name },\r\n            `change board background image`);\r\n        this.props.updateBoard(clonedBoard);\r\n        this.props.updateBoard(clonedBoard);\r\n    }\r\n\r\n    render() {\r\n\r\n        const menuClass = !this.props.isMenuShown ? 'board-menu display-none' : 'board-menu';\r\n        const { imgs } = this.state;\r\n        return (\r\n            <div className={menuClass}>\r\n                <div className=\"flex column\">\r\n                    <div className=\"board-menu-header flex justify-center\">\r\n                        <ArrowBackIosOutlined onClick={() => this.props.onToggleMenu(\"backgroundMenu\")} className=\"btn-header-menu\" />\r\n                        <h3 className=\"menu-header-title\">Photos by<a className=\"unsplash\" href=\"https://unsplash.com/?utm_source=Flowz&utm_medium=referral&utm_campaign=api-credit\" >Unsplash</a></h3>\r\n                        <CloseOutlined onClick={() => this.props.onToggleMenu(null)} className=\"btn-header-menu\" />\r\n                    </div>\r\n                    <div className=\"board-menu-content\">\r\n                        <div className=\"flex space-between wrap\">\r\n                            {imgs && imgs.map((img, index) =>\r\n\r\n                                <div className='btn-photo flex column align-center flex-end ' style={{ \"backgroundImage\": `url(\"${img.thumbUrl}\")` }} key={index} onClick={() => this.changeBoardImg(img.fullUrl)} >\r\n                                    <a className=\"credit\" title={img.userName} target=\"_blank\" rel=\"noopener noreferrer\" href={img.credit} >{img.userName}</a>\r\n                                </div>)}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    updateBoard\r\n}\r\n\r\nexport const PhotoMenu = connect(mapStateToProps, mapDispatchToProps)(_PhotoMenu)\r\n","import React, { Component } from 'react';\r\nimport { CloseOutlined } from '@material-ui/icons/';\r\nimport { ArrowBackIosOutlined } from '@material-ui/icons';\r\n\r\nexport class BackgroundMenu extends Component {\r\n\r\n    render() {\r\n        const menuClass = !this.props.isMenuShown ? 'board-menu display-none' : 'board-menu'\r\n        return (\r\n            <div className={menuClass}>\r\n                <div className=\"flex column\">\r\n                    <div className=\"board-menu-header flex justify-center\">\r\n                        <ArrowBackIosOutlined onClick={() => this.props.onToggleMenu(\"mainMenu\")} className=\"btn-header-menu\" />\r\n                        <h3 className=\"menu-header-title\">Colors</h3>\r\n                        <CloseOutlined onClick={() => this.props.onToggleMenu(null)} className=\"btn-header-menu\" />\r\n                    </div>\r\n                    <div className=\"board-menu-content\">\r\n                        <div className=\"flex space-between\">\r\n                            <div className=\"bg-btn flex column align-center\" onClick={() => this.props.onToggleMenu(\"photoMenu\")}>\r\n                                <img className=\"bg-btn-img\" src={require(\"../../style/img/collage.jpg\")} alt=\"\" />\r\n                                <span>Photos</span>\r\n                            </div>\r\n                            <div className=\"bg-btn flex column align-center\" onClick={() => this.props.onToggleMenu(\"colorMenu\")}>\r\n                                <img className=\"bg-btn-img\" src={require(\"../../style/img/colors.jpg\")} alt=\"\" />\r\n                                <span>Colors</span>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport NoteOutlinedIcon from '@material-ui/icons/NoteOutlined';\r\nimport { history } from '../history'\r\nimport { connect } from 'react-redux';\r\nimport { loadBoard, updateBoard, setCard } from '../store/actions/boardActions';\r\nimport { Clear } from '@material-ui/icons';\r\n\r\nclass _CardHeader extends Component {\r\n    state = {\r\n        txt: '',\r\n        onPhase: '',\r\n        isTitleOnEdit: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        const cardId = this.props.card.id;\r\n        let currPhase = this.props.board.phaseLists.filter(phase =>\r\n            phase.cards.find(card => card.id === cardId));\r\n        this.setState({ txt: this.props.card.title, onPhase: currPhase[0].name })\r\n    }\r\n\r\n    toggleInput = () => {\r\n        this.setState(prevState => ({ isTitleOnEdit: !prevState.isTitleOnEdit }))\r\n    }\r\n\r\n    handleSaveBoard = () => {\r\n        if (!this.state.txt.trim()) return this.toggleInput();\r\n        if (this.state.isTitleOnEdit) {\r\n            let boardClone = JSON.parse(JSON.stringify(this.props.board));\r\n            const cardId = this.props.card.id;\r\n            let currPhase = boardClone.phaseLists.filter(phase => phase.cards.find(card => card.id === cardId));\r\n            currPhase[0].cards.forEach(card => {\r\n                if (card.id === this.props.card.id) {\r\n                    card.title = this.state.txt;\r\n                }\r\n            })\r\n            this.props.updateBoard(boardClone)\r\n            this.toggleInput();\r\n        }\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        var value = target.value\r\n        this.setState({ txt: value })\r\n        this.autoGrow(this.elTextarea)\r\n    }\r\n\r\n    handleKeyPress(e) {\r\n        if (e.keyCode === 13) {\r\n            e.target.blur();\r\n        }\r\n    }\r\n\r\n    autoGrow = (el) => {\r\n        el.style.height = (el.scrollHeight) + \"px\";\r\n    }\r\n\r\n    backToboard = () => {\r\n        history.push(`/board/${this.props.board._id}`)\r\n    }\r\n\r\n    render() {\r\n        if (!this.state) return 'loading';\r\n        const { txt, isTitleOnEdit, onPhase } = this.state;\r\n\r\n        return (<div className=\"card-header\">\r\n            <div className=\"card-header-container flex align-center\">\r\n                <NoteOutlinedIcon className=\"icon\" />\r\n                {!isTitleOnEdit && <h3 onClick={this.toggleInput} className=\"card-title grow\">{txt}</h3>}\r\n                {isTitleOnEdit && <textarea ref={el => this.elTextarea = el} spellCheck=\"false\"\r\n                    onFocus={(ev) => { this.autoGrow(ev.target) }} onKeyDown={(e) => this.handleKeyPress(e)}\r\n                    className=\"card-title-input\" autoFocus\r\n                    onBlur={this.handleSaveBoard} placeholder=\"Title...\" autoCorrect=\"false\"\r\n                    onChange={this.handleChange} value={txt} />}\r\n            </div>\r\n            <button className=\"close-btn\" onClick={() => { this.props.setCard(null) }}>\r\n                <Clear className=\"close-icon\" /></button>\r\n            <p className=\"card-link\">in list <span\r\n                onClick={() => { this.props.setCard(null) }}>{onPhase}</span></p>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    updateBoard,\r\n    setCard\r\n}\r\n\r\n\r\nexport const CardHeader = connect(mapStateToProps, mapDispatchToProps)(_CardHeader)\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\nimport { connect } from 'react-redux';\r\nimport { loadBoard, updateBoard } from '../store/actions/boardActions';\r\n\r\nclass _CardDesc extends Component {\r\n    state = {\r\n        txt: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ txt: this.props.card.desc })\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        var value = target.value\r\n        this.setState({ txt: value })\r\n    }\r\n\r\n\r\n    handleSaveBoard = () => {\r\n        let boardClone = JSON.parse(JSON.stringify(this.props.board));\r\n        const cardId = this.props.card.id;\r\n        let currPhase = boardClone.phaseLists.filter(phase => phase.cards.find(card => card.id === cardId));\r\n\r\n        currPhase[0].cards.forEach(card => {\r\n            if (card.id === this.props.card.id) {\r\n                card.desc = this.state.txt;\r\n            }\r\n        })\r\n        this.props.updateBoard(boardClone);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <section>\r\n                <div className=\"desc-header-container flex\">\r\n                    <DescriptionIcon className=\"icon\" />\r\n                    <span className=\"desc-header\">Description</span>\r\n                </div>\r\n                <textarea className=\"card-desc-input\"\r\n                    placeholder=\"Add a more detailed description...\" onChange={this.handleChange}\r\n                    spellCheck=\"false\"\r\n                    onBlur={this.handleSaveBoard} value={this.state.txt}></textarea>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    updateBoard\r\n}\r\n\r\n\r\nexport const CardDesc = connect(mapStateToProps, mapDispatchToProps)(_CardDesc)\r\n\r\n\r\n","import React from 'react';\r\nimport { Clear } from '@material-ui/icons';\r\n\r\nexport function ChecklistItem(props) {\r\n    const { idx, todo, onDelete, handleChange, handleSaveBoard, handleKeyPress } = props;\r\n    return (\r\n        <div className=\"checklist-item flex align-center\" key={idx} >\r\n            <input className=\"checkbox\" type=\"checkbox\" name=\"isDone\"\r\n                onChange={(e) => { handleChange(e, idx) }}\r\n                onBlur={handleSaveBoard} checked={todo.isDone} />\r\n                \r\n            <input className=\"checklist-item-txt grow\" type=\"text\" name=\"txt\"\r\n                onChange={(e) => handleChange(e, idx)} spellCheck=\"false\"\r\n                onBlur={handleSaveBoard} value={todo.txt} onKeyDown={handleKeyPress} />\r\n            <button onClick={() => { onDelete(idx) }}><Clear className=\"icon\" /></button>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { PlaylistAddCheck } from '@material-ui/icons';\r\nimport { ChecklistItem } from './ChecklistItem';\r\nimport { loadBoard, updateBoard, LOGGED_IN_USER } from '../store/actions/boardActions';\r\nimport { boardService, OPERETIONS, TYPES } from '../services/boardService'\r\n\r\nclass _CardChecklist extends Component {\r\n    state = {\r\n        checkList: null,\r\n        todoText: '',\r\n        onAdd: false,\r\n        progress: 0,\r\n        checklistTitle: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        let checklistTitle;\r\n        (this.props.card.checklistTitle ? checklistTitle = this.props.card.checklistTitle : checklistTitle = '')\r\n        this.setState({ checkList: this.props.card.checkList, onAdd: false, checklistTitle },\r\n            () => this.progressBarUpdate());\r\n    }\r\n\r\n    progressBarUpdate = () => {\r\n        const doneTodos = this.state.checkList.reduce((acc, currVal) => {\r\n            if (currVal.isDone) acc++\r\n            return acc\r\n        }, 0)\r\n        this.setState({ progress: Math.floor((doneTodos / this.state.checkList.length) * 100) });\r\n    }\r\n\r\n    addTodo = () => {\r\n        if (!this.state.todoText) return\r\n\r\n        let newTodo = { txt: this.state.todoText, isDone: false }\r\n        let clone = this.state.checkList.slice();\r\n        clone.push(newTodo);\r\n        this.setState({ checkList: clone, todoText: '' }, () => {\r\n            this.handleSaveBoard();\r\n        });\r\n    }\r\n\r\n    handleSaveBoard = () => {\r\n        const boardClone = JSON.parse(JSON.stringify(this.props.board));\r\n        const cardId = this.props.card.id;\r\n        const currPhase = boardClone.phaseLists.find(phase => phase.cards.some(card => card.id === cardId));\r\n\r\n        const updatedCards = currPhase.cards.map(card => {\r\n            if (card.id === this.props.card.id) {\r\n                card.checkList = this.state.checkList;\r\n                card.checklistTitle = this.state.checklistTitle;\r\n            }\r\n            return card;\r\n        })\r\n        const phaseIndex = boardClone.phaseLists.findIndex(phase => phase.id === currPhase.id)\r\n        currPhase.cards = updatedCards;\r\n        boardClone.phaseLists[phaseIndex] = currPhase;\r\n        boardService.addActivity(boardClone, LOGGED_IN_USER, OPERETIONS.UPDATE, TYPES.CARD,\r\n            { id: this.props.card.id, title: this.props.card.title },\r\n            'update checklist on card');\r\n\r\n        this.props.updateBoard(boardClone)\r\n            .then(() => {\r\n                this.progressBarUpdate();\r\n            })\r\n    }\r\n\r\n\r\n    toggleAdd = () => {\r\n        if (this.state.todoText) this.addTodo();\r\n        this.setState(prevState => ({ onAdd: !prevState.onAdd }));\r\n    }\r\n\r\n\r\n    onDelete = (idx) => {\r\n        let clone = this.state.checkList.slice();\r\n        clone.splice(idx, 1);\r\n        const checklistTitle = this.state.checkList.length === 1 ? '' : this.state.checklistTitle;\r\n        this.setState({ checkList: clone, checklistTitle }, () => {\r\n            this.handleSaveBoard();\r\n        })\r\n    }\r\n\r\n    handleChange = ({ target }, idx = -1) => {\r\n        const field = target.name;\r\n        const value = (field === 'isDone') ? target.checked : target.value;\r\n        let cloneChkList = this.state.checkList.slice();\r\n        if (field === 'isDone') {\r\n            cloneChkList[idx].isDone = value;\r\n            this.setState({ checkList: cloneChkList }, () => {\r\n                this.handleSaveBoard();\r\n            });\r\n        }\r\n        else {\r\n            if (idx === -1)\r\n                (this.state.onAdd ? this.setState({ todoText: value }) : this.setState({ checklistTitle: value }))\r\n\r\n            else {\r\n\r\n                cloneChkList[idx].txt = value;\r\n            }\r\n        }\r\n        this.setState({ checkList: cloneChkList });\r\n    }\r\n\r\n    handleFocus = (ev) => ev.target.select();\r\n\r\n    handleKeyPress(e) {\r\n        if (e.keyCode === 13) {\r\n            e.target.blur();\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { todoText, onAdd, checklistTitle, progress } = this.state;\r\n        if (!this.state.checkList || !this.state.checkList.length) return null;\r\n        const progressBgc = this.state.progress === 100 ? '#61bd4f' : '#2196f3';\r\n\r\n        return (\r\n            <div className=\"card-check-list\">\r\n                <div className=\"checklist-title-container flex align-center\">\r\n                    <PlaylistAddCheck className=\"checklist-icon\" />\r\n                    <input className=\"checklist-title\" type=\"text\" name=\"txt\" placeholder=\"Checklist name...\"\r\n                        onChange={this.handleChange}\r\n                        onKeyDown={this.handleKeyPress} spellCheck=\"false\"\r\n                        onFocus={this.handleFocus} onBlur={this.handleSaveBoard}\r\n                        value={checklistTitle} /></div>\r\n                <div className=\"progress-bar-container\">\r\n                    <div className=\"progress-bar\"\r\n                        style={{ width: `${progress}%`, backgroundColor: progressBgc }}></div>\r\n                </div>\r\n                {this.state.checkList.map((todo, idx) => <ChecklistItem todo={todo} key={idx}\r\n                    onDelete={this.onDelete} handleChange={this.handleChange}\r\n                    handleSaveBoard={this.handleSaveBoard} idx={idx}\r\n                    handleKeyPress={this.handleKeyPress} />)}\r\n\r\n                {!onAdd && <button className=\"add-btn\" onClick={this.toggleAdd}>Add Todo</button>}\r\n                {onAdd && <div className=\"add-item flex align-center\">\r\n                    <input type=\"text\" onChange={this.handleChange}\r\n                        onKeyDown={this.handleKeyPress} autoFocus onBlur={this.toggleAdd} value={todoText} />\r\n                    <button className=\"save-checklist-item-btn\">Save</button>\r\n                </div>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    updateBoard\r\n}\r\n\r\nexport const CardChecklist = connect(mapStateToProps, mapDispatchToProps)(_CardChecklist)\r\n\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { loadBoard, setCard, updateBoard } from '../store/actions/boardActions';\r\nimport { CardHeader } from './CardHeader';\r\nimport { CardDesc } from './CardDesc';\r\nimport { CardChecklist } from './CardChecklist';\r\nimport { Activities } from '../cmps/Activities'\r\nimport {\r\n    PermIdentity, LabelOutlined, PlaylistAddCheck,\r\n    Schedule, Attachment, CropOriginal\r\n} from '@material-ui/icons';\r\nimport { LabelsEdit } from './LabelsEdit';\r\nimport { MembersEdit } from './MembersEdit';\r\nimport { MemberInitials } from './MemberInitials';\r\nimport { boardService } from '../services/boardService';\r\nimport { DueDateEdit } from './DueDateEdit';\r\nimport moment from 'moment';\r\n\r\n\r\nclass _Card extends Component {\r\n    state = {\r\n        card: null,\r\n        isLabelEditShown: false,\r\n        isMembersEditShown: false,\r\n        cardActivities: [],\r\n        isDueDateEditShown: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('keydown', this.hideCard);\r\n        var card;\r\n        this.props.board.phaseLists.forEach(phase => {\r\n            const res = phase.cards.find(card => card.id === this.props.cardId);\r\n            if (res) card = res;\r\n        });\r\n        const cardActivities = this.getActivities(card.id);\r\n        this.setState({ card, cardActivities });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('keydown', this.hideCard);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (JSON.stringify(prevProps.board) !== JSON.stringify(this.props.board)) {\r\n            var card;\r\n            this.props.board.phaseLists.forEach(phase => {\r\n                const res = phase.cards.find(card => card.id === this.props.cardId);\r\n                if (res) card = res;\r\n            });\r\n            const cardActivities = this.getActivities(card.id);\r\n            this.setState({ card, cardActivities });\r\n        }\r\n    }\r\n\r\n    hideCard = (ev) => {\r\n        const { isLabelEditShown, isMembersEditShown, isDueDateEditShown } = this.state;\r\n        if (ev.code === 'Escape' && !isLabelEditShown\r\n            && !isMembersEditShown && !isDueDateEditShown\r\n        ) this.props.setCard(null);\r\n    }\r\n\r\n\r\n    toggleProperty = property => {\r\n        this.setState(prevState => ({ [property]: !prevState[property] }));\r\n    }\r\n\r\n    getActivities = (cardId, limit = 10) => {\r\n        const cardActivities = this.props.board.activities.filter(activity => activity.object.id === cardId);\r\n        if (cardActivities.length > 10) return cardActivities.slice(0, limit);\r\n        return cardActivities\r\n\r\n\r\n    }\r\n\r\n    addCheckList = () => {\r\n        const cloneCard = JSON.parse(JSON.stringify(this.state.card));\r\n        if (!cloneCard.checkList.length) {\r\n            cloneCard.checkList.push({ txt: '', isDone: false });\r\n            this.setState({ card: cloneCard })\r\n        }\r\n    }\r\n\r\n    getPhaseIdxByCardId = (cardId) => {\r\n        return this.props.board.phaseLists.findIndex(phase =>\r\n            phase.cards.some(card => card.id === cardId))\r\n    }\r\n\r\n\r\n    removeMemberFromCard = (member) => {\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const cardId = this.props.card.id;\r\n\r\n        // Getting the access to the card members inside the board\r\n        const phaseIdx = this.getPhaseIdxByCardId(cardId);\r\n        const cardIdx = boardCopy.phaseLists[phaseIdx].cards.findIndex(card => card.id === cardId);\r\n        const card = boardCopy.phaseLists[phaseIdx].cards[cardIdx];\r\n\r\n        //Removing the member from the card\r\n        card.assignedTo = card.assignedTo.filter(mmbr => mmbr._id !== member._id);\r\n        boardCopy.phaseLists[phaseIdx].cards[cardIdx] = card;\r\n        this.props.updateBoard(boardCopy);\r\n    }\r\n\r\n    changeDueDate = newDate => {\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const cardId = this.props.card.id;\r\n        const phaseIdx = this.getPhaseIdxByCardId(cardId);\r\n        const cardIdx = boardCopy.phaseLists[phaseIdx].cards.findIndex(card => card.id === cardId);\r\n        //Getting access to the card inside the board\r\n\r\n        boardCopy.phaseLists[phaseIdx].cards[cardIdx].dueDate = newDate;\r\n        this.props.updateBoard(boardCopy);\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.board || !this.state.card) return 'Loading';\r\n        const { card, isLabelEditShown, isMembersEditShown, cardActivities, isDueDateEditShown } = this.state;\r\n        const { assignedTo, labels, dueDate } = card;\r\n        const { toggleProperty, changeDueDate } = this;\r\n\r\n        return (\r\n            <section>\r\n                <div onClick={() => { this.props.setCard(null) }} className=\"card-modal\" >\r\n                    <div onClick={(ev) => ev.stopPropagation()} className=\"card-container\" >\r\n                        < CardHeader card={card} />\r\n                        <div className=\"card-content flex\">\r\n                            <div className=\"card-details flex column grow\">\r\n                                {assignedTo.length > 0 && <div className=\"card-details-members\">\r\n                                    <h3>Members</h3>\r\n                                    <div className=\"flex align-center\">\r\n                                        {assignedTo.map((member) => <span key={member._id}\r\n                                            onClick={() => { this.removeMemberFromCard(member) }}>\r\n                                            <MemberInitials member={member} />\r\n                                        </span>)}\r\n                                    </div>\r\n                                </div>}\r\n\r\n                                {labels.length > 0 && <div className=\"card-details-labels\">\r\n                                    <h3>Labels</h3>\r\n                                    <div className=\"labels-gallery flex wrap align-center\">\r\n                                        {labels.map(label => <span title={label.txt} className=\"label\"\r\n                                            onClick={() => { toggleProperty('isLabelEditShown') }}\r\n                                            style={{ backgroundColor: label.color }}\r\n                                            key={label.id}> <span className=\"label-txt\">{label.txt}</span>\r\n                                        </span>)}\r\n                                    </div>\r\n                                </div>}\r\n\r\n                                {dueDate && <div className=\"card-details-date\">\r\n                                    <h3>Due Date</h3>\r\n                                    <div className=\"date flex align-center\">\r\n                                        <span onClick={() => { toggleProperty('isDueDateEditShown') }}\r\n                                            className=\"date-str\">{`${moment(dueDate).format(\"MMM Do\")}\r\n                                     at ${moment(dueDate).format(\"HH:mm\")}`}</span>\r\n                                    </div>\r\n                                </div>}\r\n                                < CardDesc card={card} />\r\n                                {(card.checkList.length > 0) && < CardChecklist card={card} />}\r\n                                <Activities card={card} showCommentBox={true} activities={cardActivities} />\r\n                            </div>\r\n                            <div className=\"card-sidebar\">\r\n                                <button onClick={() => { toggleProperty('isMembersEditShown') }}\r\n                                    className=\"card-sidebar-btn\"><span>\r\n                                        <PermIdentity className=\"icon\" /></span>Members</button>\r\n                                {isMembersEditShown &&\r\n                                    <MembersEdit members={this.props.board.members} card={card}\r\n                                        toggleProperty={toggleProperty} />}\r\n\r\n                                <button onClick={() => { toggleProperty('isLabelEditShown') }} className=\"card-sidebar-btn\">\r\n                                    <span ><LabelOutlined className=\"icon\" /></span>Labels</button>\r\n\r\n                                {isLabelEditShown &&\r\n                                    <LabelsEdit card={card} toggleProperty={toggleProperty} />}\r\n\r\n                                {(card.checkList.length < 1) && <button className=\"card-sidebar-btn\"\r\n                                    onClick={this.addCheckList}><span>\r\n                                        <PlaylistAddCheck className=\"icon\" /></span>Checklist</button>}\r\n\r\n                                <button onClick={() => { toggleProperty('isDueDateEditShown') }}\r\n                                    className=\"card-sidebar-btn\"><span>\r\n                                        <Schedule className=\"icon\" /></span>Due Date</button>\r\n                                {isDueDateEditShown && <DueDateEdit changeDueDate={changeDueDate}\r\n                                    toggleProperty={toggleProperty} />}\r\n\r\n                                <button className=\"card-sidebar-btn\"><span>\r\n                                    <Attachment className=\"icon\" /></span>Attachment</button>\r\n                                <button className=\"card-sidebar-btn\"><span>\r\n                                    <CropOriginal className=\"icon\" /></span>Cover</button>\r\n                            </div>\r\n                        </div>\r\n                    </div></div>\r\n            </section >\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board,\r\n        card: state.trelloApp.card\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    updateBoard,\r\n    setCard\r\n}\r\n\r\nexport const Card = connect(mapStateToProps, mapDispatchToProps)(_Card)","import React, { Component } from 'react';\r\nimport { loadBoard } from '../store/actions/boardActions';\r\nimport { connect } from 'react-redux';\r\nimport { PhaseList } from '../cmps/PhaseList';\r\nimport { MemberInitials } from '../cmps/MemberInitials';\r\nimport { BoardMenu } from '../cmps/boardMenu/BoardMenu';\r\nimport { ColorMenu } from '../cmps/boardMenu/ColorMenu';\r\nimport { PhotoMenu } from '../cmps/boardMenu/PhotoMenu';\r\nimport { MenuOutlined, PieChartOutlined } from '@material-ui/icons';\r\nimport { Link } from 'react-router-dom';\r\nimport { BackgroundMenu } from '../cmps/boardMenu/BackgroundMenu';\r\nimport { Card } from '../cmps/Card';\r\nimport { socketService } from '../services/socketService';\r\n\r\n\r\nclass _Board extends Component {\r\n\r\n    state = {\r\n        boardMenus: {\r\n            currentOpend: null,\r\n            menusState: {\r\n                mainMenu: false,\r\n                backgroundMenu: false,\r\n                colorMenu: false,\r\n                photoMenu: false\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getBoardById();\r\n        this.openSocket();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        socketService.off('open board socket');\r\n        socketService.terminate();\r\n    }\r\n\r\n    openSocket = () => {\r\n        socketService.setup();\r\n        const id = this.props.match.params.id;\r\n        socketService.emit('open board socket', id);\r\n        socketService.on('board updated', () => {\r\n            this.getBoardById();\r\n        });\r\n    }\r\n\r\n\r\n    getBoardById = async () => {\r\n        const id = this.props.match.params.id;\r\n        await this.props.loadBoard(id);\r\n    }\r\n\r\n    toggleMenu = (menuName) => {\r\n        const { boardMenus } = this.state;\r\n        const clonedMenus = JSON.parse(JSON.stringify(boardMenus));\r\n        //close open menu if their is\r\n        if (!menuName) { //menuName===null mean no menu should be open\r\n            clonedMenus.menusState[clonedMenus.currentOpend] = false;\r\n            clonedMenus.currentOpend = null;\r\n        } else {\r\n            if (clonedMenus.currentOpend != null)\r\n                clonedMenus.menusState[clonedMenus.currentOpend] = !clonedMenus.menusState[clonedMenus.currentOpend];\r\n            //open menu new menu\r\n            clonedMenus.menusState[menuName] = !clonedMenus.menusState[menuName];\r\n            //set currentOpend \r\n            clonedMenus.currentOpend = menuName;\r\n\r\n\r\n        }\r\n        this.setState({ boardMenus: clonedMenus });\r\n    }\r\n\r\n    render() {\r\n\r\n        const { board } = this.props;\r\n        if (!board) return '';\r\n\r\n        const { mainMenu, backgroundMenu, colorMenu, photoMenu } = this.state.boardMenus.menusState;\r\n        const boardBg = board.bgColor ? { \"backgroundColor\": board.bgColor } :\r\n            { \"backgroundImage\": `url(\"${board.imgUrl}\")`, \"backgroundSize\": \"cover\" }\r\n\r\n        return (\r\n            (!board) ? 'loading' : <main style={boardBg} className=\"board flex column grow\">\r\n                <section className=\"board-nav flex space-between\">\r\n                    <div className=\"flex\">\r\n                        <div className=\"board-title\" href=\"#\">\r\n                            <span dir=\"auto\">{board.name}</span>\r\n                        </div>\r\n                        <span className=\"board-nav-divider\"></span>\r\n                        <div className=\"board-members flex align-center\">\r\n                            {board.members && board.members.map((member) => <MemberInitials key={member._id} member={member} />)}\r\n                        </div>\r\n                        <Link to={`/board/${board._id}/dashboard`}>\r\n                            <div className=\"nav-btn  flex align-center\">\r\n                                <PieChartOutlined className=\"nav-icon\" />\r\n                                <span className=\"btn-text\">Statistics</span>\r\n                            </div>\r\n                        </Link>\r\n                    </div>\r\n                    <div className=\"nav-btn flex align-center\" onClick={() => this.toggleMenu(\"mainMenu\")}>\r\n                        <MenuOutlined />\r\n                    </div>\r\n                    <BoardMenu isMenuShown={mainMenu} board={board} onToggleMenu={this.toggleMenu} />\r\n                    <BackgroundMenu isMenuShown={backgroundMenu} board={board} onToggleMenu={this.toggleMenu} />\r\n                    <ColorMenu isMenuShown={colorMenu} board={board} onToggleMenu={this.toggleMenu} />\r\n                    <PhotoMenu isMenuShown={photoMenu} board={board} onToggleMenu={this.toggleMenu} />\r\n                </section>\r\n                <section className=\"board-content flex grow\">\r\n                    <PhaseList />\r\n                </section>\r\n                {this.props.card && <Card cardId={this.props.card.id} />}\r\n            </main>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board,\r\n        card: state.trelloApp.card\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard\r\n}\r\n\r\nexport const Board = connect(mapStateToProps, mapDispatchToProps)(_Board)","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nclass _Home extends Component {\r\n    render() {\r\n        return (\r\n            <main className=\"home-container\">\r\n                <div className=\"text-area flex column align-start\">\r\n                    <h1>Don't Waste Papers</h1>\r\n                    <h3><span>Flowz</span> the project managment software that keep teams going and Collaborate</h3>\r\n\r\n                    <Link to=\"/board/5ecbc8edcb39d7f5494f8d40\"> <span className=\"btn-home\">Get Started</span></Link>\r\n                </div>\r\n\r\n\r\n            </main >\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n\r\n}\r\n\r\nexport const Home = connect(mapStateToProps, mapDispatchToProps)(_Home);\r\n","import React, { Component } from 'react';\r\n\r\nexport class Login extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport class Signup extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { boardService } from '../services/boardService'\r\nimport { HomeOutlined, DashboardOutlined,  AccountTreeOutlined, Add, Close } from '@material-ui/icons';\r\nimport { MemberInitials } from './MemberInitials';\r\nimport { history } from '../history'\r\nimport { connect } from 'react-redux';\r\nimport { loadBoard, updateBoard, addBoard } from '../store/actions/boardActions';\r\nimport { LOGGED_IN_USER } from '../store/actions/boardActions'\r\n\r\nconst isLogin = true;\r\n\r\nclass _MainNav extends Component {\r\n\r\n\r\n    state = {\r\n        isCreateBoardMenuShown: false,\r\n        newBoardName: '',\r\n        newBoardColor: '#61acca'\r\n    }\r\n\r\n    isPreviewSelected = ({ target }) => {\r\n        console.log('color is ');\r\n    }\r\n\r\n    handleChangeColor = async ({ target }) => {\r\n\r\n        const boardColor = target.value;        \r\n        await this.setState({ newBoardColor: boardColor });\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        var value = target.value\r\n        this.setState({ newBoardName: value })\r\n    }\r\n\r\n    toggleAddBoard = () => {\r\n        this.setState(prevState => ({ isCreateBoardMenuShown: !prevState.isCreateBoardMenuShown }))\r\n    }\r\n\r\n    createNewBoard = async () => {\r\n        let boardName;\r\n        if (!this.state.newBoardName.trim()) boardName = 'New Board';\r\n        else boardName = this.state.newBoardName;\r\n        const newBoard = boardService.createNewBoard(boardName, this.state.newBoardColor, LOGGED_IN_USER);\r\n        await this.props.addBoard(newBoard);\r\n        history.push(`/board/${this.props.board._id}`)\r\n        this.setState({ isCreateBoardMenuShown: false, newBoardName: '' })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { isCreateBoardMenuShown, newBoardName, newBoardColor } = this.state\r\n        if (!this.state) return ''\r\n        return (\r\n            <header className=\"main-header flex space-between\">\r\n                <nav className=\"flex align-center\">\r\n                    <Link to=\"/\">\r\n                        <div className=\"btn-main-nav\">\r\n                            <HomeOutlined className=\"btn-icon\" />\r\n                        </div>\r\n                    </Link>\r\n                    <Link to=\"/boards\">\r\n                        <div className=\"btn-main-nav flex align-center\">\r\n                            <DashboardOutlined className=\"btn-icon\" />\r\n                            <span className=\"btn-text\">Boards</span>\r\n                        </div>\r\n                    </Link>\r\n                </nav>\r\n\r\n                <div className=\"nav-center flex align-center justify-center\">\r\n                    <Link to=\"/\">\r\n                        <div className=\"logo flex align-center\">\r\n                            <AccountTreeOutlined className=\"btn-icon\" />\r\n                            <span className=\"logo-text\">Flowz</span>\r\n                        </div>\r\n                    </Link>\r\n                </div>\r\n\r\n                <nav className=\"right-nav flex flex-end align-center\">\r\n                    <div className=\"btn-main-nav\" onClick={this.toggleAddBoard}>\r\n                        <Add className=\"btn-icon\" />\r\n                    </div>\r\n                    {isCreateBoardMenuShown && <div className=\"create-board-menu  flex column\">\r\n                        <div className=\"create-board-header flex align-center\">\r\n                            <h5 className=\"grow\">New Board</h5>\r\n                            <Close className=\"close-create-board-menu\" onClick={this.toggleAddBoard} />\r\n                        </div>\r\n                        <div className=\"create-board-btns flex column\">\r\n                            <div className=\"color-container\">\r\n                                {/* style=\"width:20px; height:20px; background-color:red;display:inline-block\" */}\r\n                                {/* style=\"display:none\" */}\r\n\r\n                                <label className={\"rgb(81, 152, 57)\" === newBoardColor ? \"color-preview green selected\" : \"color-preview green\"}  >\r\n                                    <input onClick={this.handleChangeColor} className=\"color-preview-input\" type=\"radio\"\r\n                                        name=\"green\" value=\"rgb(81, 152, 57)\" /></label>\r\n\r\n                                <label className={\"#d29034\" === newBoardColor ? \"color-preview orange selected\" : \"color-preview orange\"} >\r\n                                    <input onClick={this.handleChangeColor} className=\"color-preview-input\" type=\"radio\"\r\n                                        name=\"orange\" value=\"#d29034\" /></label>\r\n\r\n                                <label className={\"rgb(0, 121, 191)\" === newBoardColor ? \"color-preview blue selected\" : \"color-preview blue\"} >\r\n                                    <input onClick={this.handleChangeColor} className=\"color-preview-input\" type=\"radio\"\r\n                                        name=\"blue\" value=\"rgb(0, 121, 191)\" /></label>\r\n\r\n                                <label className={\"rgb(176, 70, 50)\" === newBoardColor ? \"color-preview red selected\" : \"color-preview red\"} >\r\n                                    <input onClick={this.handleChangeColor} className=\"color-preview-input\" type=\"radio\"\r\n                                        name=\"red\" value=\"rgb(176, 70, 50)\" /></label>\r\n\r\n                                <label className={\"rgb(137, 96, 158)\" === newBoardColor ? \"color-preview purple selected\" : \"color-preview purple\"} >\r\n                                    <input onClick={this.handleChangeColor} className=\"color-preview-input\" type=\"radio\"\r\n                                        name=\"purple\" value=\"rgb(137, 96, 158)\" /></label>\r\n\r\n                                <label className={\"rgb(205, 90, 145)\" === newBoardColor ? \"color-preview pink selected\" : \"color-preview pink\"} >\r\n                                    <input onClick={this.handleChangeColor} className=\"color-preview-input\" type=\"radio\"\r\n                                        name=\"pink\" value=\"rgb(205, 90, 145)\" /></label>\r\n\r\n                                <label className={\"rgb(75, 191, 107)\" === newBoardColor ? \"color-preview light-green selected\" : \"color-preview light-green\"} >\r\n                                    <input onClick={this.handleChangeColor} className=\"color-preview-input\" type=\"radio\"\r\n                                        name=\"light-green\" value=\"rgb(75, 191, 107)\" /></label>\r\n\r\n                                <label className={\"rgb(73, 169, 215)\" === newBoardColor ? \"color-preview turquise selected\" : \"color-preview turquise\"} >\r\n                                    <input onClick={this.handleChangeColor} className=\"color-preview-input\" type=\"radio\"\r\n                                        name=\"turquise\" value=\"rgb(73, 169, 215)\" /></label>\r\n\r\n\r\n                                {/* <div onClick={this.handleChangeColor} className=\"color-preview color-preview-green\">&nbsp;</div> */}\r\n\r\n\r\n                                {/* <div onClick={this.handleChangeColor} className=\"color-preview color-preview-orange\">&nbsp;</div>\r\n                                <div onClick={this.handleChangeColor} className=\"color-preview color-preview-blue\">&nbsp;</div>\r\n                                <div onClick={this.handleChangeColor} className=\"color-preview color-preview-red\">&nbsp;</div>\r\n                                <div onClick={this.handleChangeColor} className=\"color-preview color-preview-purple\">&nbsp;</div>\r\n                                <div onClick={this.handleChangeColor} className=\"color-preview color-preview-pink\">&nbsp;</div>\r\n                                <div onClick={this.handleChangeColor} className=\"color-preview color-preview-light-green\">&nbsp;</div>\r\n                                <div onClick={this.handleChangeColor} className=\"color-preview color-preview-turquise\">&nbsp;</div> */}\r\n                            </div>\r\n                            <input className=\"board-name-input\" type=\"text\" onChange={this.handleChange} placeholder=\"Your Board's name...\" value={newBoardName} />\r\n                            <button className=\"create-board-btn\" onClick={this.createNewBoard} >Create a new Board</button>\r\n                        </div>\r\n                    </div>}\r\n                    {\r\n                        isLogin ? <span className=\"logged-in flex align-center\"><MemberInitials fullName=\"Or Levy\" /></span> :\r\n                            <div className=\"btn-main-nav\">\r\n                                <span className=\"btn-text\">Login</span>\r\n                            </div>\r\n                    }\r\n\r\n                </nav>\r\n            </header >\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    updateBoard,\r\n    addBoard\r\n}\r\n\r\n\r\nexport const MainNav = connect(mapStateToProps, mapDispatchToProps)(_MainNav)\r\n\r\n","import React, { Component } from 'react'\r\nimport { history } from '../history'\r\nimport { connect } from 'react-redux';\r\nimport { loadBoard, updateBoard, queryBoards } from '../store/actions/boardActions';\r\n\r\nclass _Boards extends Component {\r\n    state = {\r\n        txt: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.queryBoards();\r\n    }\r\n\r\n\r\n    handleChange = ({ target }) => {\r\n        var value = target.value\r\n        this.setState({ txt: value })\r\n        this.autoGrow(this.elTextarea)\r\n    }\r\n\r\n\r\n    backToboard = () => {\r\n        history.push(`/board/${this.props.board._id}`)\r\n    }\r\n\r\n    handleLoadBoard = (id) => {\r\n        this.props.loadBoard(id)\r\n        history.push(`/board/${id}`)\r\n    }\r\n\r\n    render() {\r\n\r\n        if (!this.state) return;\r\n        const { boards } = this.props\r\n        return (\r\n            <section>\r\n                <div className=\"boards-page\">\r\n                    <div className='boards flex column' >\r\n                        <h1 className=\"boards-title flex\">Boards</h1>\r\n                        <div className=\"boards-container\">\r\n                            {boards && boards.map((board, idx) =>\r\n                                <div className={`board-item board-item${idx}`} key={idx}\r\n                                    onClick={() => this.handleLoadBoard(board._id)}\r\n                                    style={board.imgUrl ?\r\n                                        { backgroundImage: `url(${board.imgUrl})`, backgroundSize: 'cover' } : { backgroundColor: board.bgColor }} >\r\n                                    {<h3>{board.name}</h3>}\r\n                                </div>)}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board,\r\n        boards: state.trelloApp.boards\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    updateBoard,\r\n    queryBoards\r\n}\r\n\r\nexport const Boards = connect(mapStateToProps, mapDispatchToProps)(_Boards)\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport { Doughnut, Bar, Pie } from 'react-chartjs-2';\r\nimport { connect } from 'react-redux';\r\nimport { loadBoard, } from '../store/actions/boardActions';\r\n\r\nconst bgColors =\r\n    [\r\n        '#003f5c',\r\n        '#2f4b7c',\r\n        '#665191',\r\n        '#a05195',\r\n        '#d45087',\r\n        '#f95d6a',\r\n        '#ff7c43',\r\n        '#ffa600',\r\n        '#0b1f5c',\r\n        '#57236d',\r\n        '#92226f',\r\n        '#c42b65',\r\n        '#e94a50',\r\n        '#fe7634',\r\n        '#ffa600',\r\n    ];\r\nconst hovColors =\r\n    [\r\n        '#FF6384A0',\r\n        '#36A2EBA0',\r\n        '#FFCE56A0',\r\n        '#e53935',\r\n        '#e57373',\r\n        '#6633FF',\r\n        '#FF00CC',\r\n        '#9900FF',\r\n        '#DAF7A6',\r\n        '#82b1ff',\r\n        '#1976d2',\r\n        '#e53935',\r\n        '#e57373',\r\n        '#6633FF',\r\n        '#FF00CC',\r\n    ];\r\n\r\n\r\nclass _Dashboard extends Component {\r\n\r\n\r\n    componentDidMount() {\r\n        this.getBoardById();\r\n\r\n\r\n    }\r\n    getBoardById = async () => {\r\n        const id = this.props.match.params.id;\r\n        await this.props.loadBoard(id);\r\n    }\r\n\r\n    getSprintProgress = () => {\r\n\r\n        const { board } = this.props;\r\n        var getSprintProgressMap = {};\r\n        board.phaseLists.forEach(phase => {\r\n            phase.cards.forEach(card => {\r\n                card.checkList.forEach(checkListItem => {\r\n                    if (checkListItem.isDone) {\r\n                        (!getSprintProgressMap[\"Completd\"]) ? getSprintProgressMap[\"Completd\"] = 1 : getSprintProgressMap[\"Completd\"] += 1;\r\n                    } else {\r\n                        (!getSprintProgressMap[\"In Progress\"]) ? getSprintProgressMap[\"In Progress\"] = 1 : getSprintProgressMap[\"In Progress\"] += 1;\r\n                    }\r\n                })\r\n            })\r\n        });\r\n\r\n        return {\r\n\r\n            labels: [\r\n                //the labels are the keys of the object map,E.g 'Educational, Funny..'\r\n                ...Object.keys(getSprintProgressMap)\r\n            ],\r\n            datasets: [{\r\n                label: \"Sprint Progress\",\r\n                data: [...Object.values(getSprintProgressMap)],\r\n                backgroundColor: bgColors,\r\n                hoverBackgroundColor: hovColors\r\n\r\n            }]\r\n        };\r\n    }\r\n\r\n    getTaskPerPhaseDistribution = () => {\r\n        const { board } = this.props;\r\n        var phaseTaskMap = {};\r\n        board.phaseLists.forEach(phase => {\r\n            phase.cards.forEach(card => {\r\n\r\n                (!phaseTaskMap[phase]) ? phaseTaskMap[phase.name] = 1 : phaseTaskMap[phase.name] += 1;\r\n\r\n            })\r\n        });\r\n\r\n        return {\r\n\r\n            labels: [\r\n\r\n                ...Object.keys(phaseTaskMap)\r\n            ],\r\n            datasets: [{\r\n                label: \"Task Per Phase Distribution\",\r\n                data: [...Object.values(phaseTaskMap)],\r\n                backgroundColor: bgColors,\r\n                hoverBackgroundColor: hovColors\r\n\r\n            }]\r\n        };\r\n    }\r\n    getTaskByLables = () => {\r\n        const { board } = this.props;\r\n        var devTaskMap = {};\r\n        board.phaseLists.forEach(phase => {\r\n            phase.cards.forEach(card => {\r\n                card.labels.forEach(label => {\r\n                    (!devTaskMap[label.txt]) ? devTaskMap[label.txt] = 1 : devTaskMap[label.txt] += 1;\r\n                })\r\n            })\r\n        });\r\n\r\n        return {\r\n\r\n            labels: [\r\n                //the labels are the keys of the object map,E.g 'Educational, Funny..'\r\n                ...Object.keys(devTaskMap)\r\n            ],\r\n            datasets: [{\r\n                label: \"Tasks by Labels\",\r\n                data: [...Object.values(devTaskMap)],\r\n                backgroundColor: bgColors,\r\n                hoverBackgroundColor: hovColors\r\n\r\n            }]\r\n        };\r\n    }\r\n\r\n    getTasksPerDevloperData() {\r\n\r\n        const { board } = this.props;\r\n        var devTaskMap = {};\r\n        board.phaseLists.forEach(phase => {\r\n            phase.cards.forEach(card => {\r\n                card.assignedTo.forEach(member => {\r\n                    (!devTaskMap[member.fullName]) ? devTaskMap[member.fullName] = 1 : devTaskMap[member.fullName] += 1;\r\n                })\r\n            })\r\n        });\r\n\r\n        return {\r\n\r\n            labels: [\r\n                //the labels are the keys of the object map,E.g 'Educational, Funny..'\r\n                ...Object.keys(devTaskMap)\r\n            ],\r\n            datasets: [{\r\n                label: \"Task Per Devloper\",\r\n                data: [...Object.values(devTaskMap)],\r\n                backgroundColor: bgColors,\r\n                hoverBackgroundColor: hovColors\r\n\r\n            }]\r\n        };\r\n\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.board) return 'loading';\r\n        const tPerDevloper = this.getTasksPerDevloperData();\r\n        const taskPerPhaseDistribution = this.getTaskPerPhaseDistribution();\r\n        const tasksByLabels = this.getTaskByLables()\r\n        const sprintProgress = this.getSprintProgress();\r\n        return (\r\n            <section className=\"chart-cont\">\r\n\r\n                <article className=\"flex column align-centery\">\r\n                    <Bar data={tPerDevloper} options={{\r\n                        scales: {\r\n                            yAxes: [{\r\n                                ticks: {\r\n                                    beginAtZero: true\r\n                                }\r\n                            }]\r\n                        }\r\n                    }} />\r\n                </article>\r\n                <article className=\"flex column align-centery\">\r\n                    <Doughnut data={taskPerPhaseDistribution} />\r\n                </article>\r\n                <article className=\"flex column align-centery\">\r\n                    <Bar data={tasksByLabels} options={{\r\n                        scales: {\r\n                            yAxes: [{\r\n                                ticks: {\r\n                                    beginAtZero: true\r\n                                }\r\n                            }]\r\n                        }\r\n                    }} />\r\n                </article>\r\n                <article className=\"flex column align-centery\">\r\n                    <h2>Sprint Progress by cheklist Items</h2>\r\n                    <Pie data={sprintProgress} />\r\n                </article>\r\n            </section>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard\r\n}\r\n\r\nexport const Dashboard = connect(mapStateToProps, mapDispatchToProps)(_Dashboard)\r\n","import React from 'react';\r\nimport { Router, Switch, Route } from 'react-router';\r\nimport { history } from './history';\r\nimport { Board } from './pages/Board';\r\nimport { Home } from './pages/Home';\r\nimport { Login } from './pages/Login';\r\nimport { Signup } from './pages/Signup';\r\nimport { Card } from './cmps/Card';\r\nimport { MainNav } from './cmps/MainNav';\r\nimport { Boards } from './pages/Boards';\r\nimport { Dashboard } from './pages/Dashboard';\r\n\r\nexport function App() {\r\n  return (\r\n    <React.Fragment>\r\n      <Router history={history}>\r\n        <MainNav />\r\n        <Switch>\r\n          <Route path=\"/\" component={Home} exact />\r\n          <Route path=\"/board/:id\" component={Board} exact />\r\n          <Route path=\"/login\" component={Login} exact />\r\n          <Route path=\"/signup\" component={Signup} exact />\r\n          <Route path=\"/board/:boardId/card/:cardId\" component={Card} exact />\r\n          <Route path=\"/board/:id/dashboard\" component={Dashboard} />\r\n          <Route path=\"/boards\" component={Boards} exact />\r\n\r\n        </Switch>\r\n      </Router>\r\n    </React.Fragment>\r\n  );\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { UPDATE_BOARD, QUERY_BOARDS, REMOVE_BOARD, ADD_BOARD, LOAD_BOARD } from '../actions/boardActions';\r\nimport { socketService } from '../../services/socketService';\r\n\r\n\r\n\r\n\r\nconst initialState = {\r\n    boards: [],\r\n    board: null,\r\n    card: null\r\n}\r\n\r\nexport function boardReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case QUERY_BOARDS:\r\n            return {\r\n                ...state,\r\n                boards: action.boards\r\n            }\r\n        case LOAD_BOARD:\r\n\r\n            return {\r\n                ...state,\r\n                board: { ...action.board }\r\n            };\r\n        case ADD_BOARD:\r\n            return {\r\n                ...state,\r\n                board: action.board\r\n            };\r\n        case UPDATE_BOARD:\r\n            socketService.emit('board updated', action.board._id)\r\n            return {\r\n                ...state,\r\n                board: { ...action.board }\r\n            }\r\n        case REMOVE_BOARD:\r\n            return {\r\n                ...state,\r\n                boards: state.boards.filter(board => board._id !== action.boardId)\r\n            };\r\n        case 'SET_CARD':\r\n            return {\r\n                ...state,\r\n                card: action.card\r\n            }\r\n        default:\r\n            return state;\r\n    };\r\n}\r\n\r\n\r\n","import { combineReducers } from 'redux';\r\nimport { boardReducer } from './boardReducer'\r\n\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    trelloApp: boardReducer,\r\n})","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { rootReducer } from './reducers/index';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(applyMiddleware(thunk))\r\n);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './style/global.scss';\nimport { App } from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './store/store';\nimport MomentUtils from '@date-io/moment';\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\n\nReactDOM.render(\n  <Provider store={store}>\n    <MuiPickersUtilsProvider utils={MomentUtils}>\n      <App />\n    </MuiPickersUtilsProvider>\n  </Provider>,\n  document.getElementById('root')\n)\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n"],"sourceRoot":""}